{
  "version": 1.1,
  "tags": [
    {
      "name": "v:asset",
      "description": "### Basic Asset ViewHelper Places the contents of the asset (the tag body) directly in the additional header content of the page. This most basic possible version of an Asset has only the core features shared by every Asset type: - a \"name\" attribute which is required, identifying the Asset by a lowerCamelCase or lowercase_underscored value, your preference (but lowerCamelCase recommended for consistency). - a \"dependencies\" attribute with a CSV list of other named Assets upon which the current Asset depends. When used, this Asset will be included after every asset listed as dependency. - a \"group\" attribute which is optional and is used ty further identify the Asset as belonging to a particular group which can be suppressed or manipulated through TypoScript. For example, the default value is \"fluid\" and if TypoScript is used to exclude the group \"fluid\" then any Asset in that group will simply not be loaded. - an \"overwrite\" attribute which if enabled causes any existing asset with the same name to be overwritten with the current Asset instead. If rendered in a loop only the last instance is actually used (this allows Assets in Partials which are rendered in an f:for loop). - a \"debug\" property which enables output of the information used by the current Asset, with an option to force debug mode through TypoScript. - additional properties which affect how the Asset is processed. For a full list see the argument descriptions; the same settings can be applied through TypoScript per-Asset, globally or per-Asset-group. > Note: there are no static TypoScript templates for VHS but > you will find a complete list in the README.md file in the > root of the extension folder. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to insert in header/footer",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to insert in header/footer"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "If not using tag content, specify path to file here",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "If not using tag content, specify path to file here"
        },
        {
          "name": "${external:external}=\"$1\"",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets",
          "valueSet": "v"
        },
        {
          "name": "external",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\"",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\""
        },
        {
          "name": "${overwrite:overwrite}=\"$1\"",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.",
          "valueSet": "v"
        },
        {
          "name": "overwrite",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite."
        },
        {
          "name": "${dependencies:dependencies}=\"$1\"",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies",
          "valueSet": "v"
        },
        {
          "name": "dependencies",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies"
        },
        {
          "name": "${group:group}=\"$1\"",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.",
          "valueSet": "v"
        },
        {
          "name": "group",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs."
        },
        {
          "name": "${debug:debug}=\"$1\"",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper",
          "valueSet": "v"
        },
        {
          "name": "debug",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper"
        },
        {
          "name": "${standalone:standalone}=\"$1\"",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied",
          "valueSet": "v"
        },
        {
          "name": "standalone",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied"
        },
        {
          "name": "${rewrite:rewrite}=\"$1\"",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls",
          "valueSet": "v"
        },
        {
          "name": "rewrite",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls"
        },
        {
          "name": "${fluid:fluid}=\"$1\"",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified",
          "valueSet": "v"
        },
        {
          "name": "fluid",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same"
        },
        {
          "name": "${movable:movable}=\"$1\"",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.",
          "valueSet": "v"
        },
        {
          "name": "movable",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS."
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything."
        },
        {
          "name": "${namedChunks:namedChunks}=\"$1\"",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency",
          "valueSet": "v"
        },
        {
          "name": "namedChunks",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency"
        }
      ]
    },
    {
      "name": "v:asset.prefetch",
      "description": "### Asset DNS Prefetching ViewHelper Enables the special `<link rel=\"dns-prefetch\" />` tag which instructs the browser to start prefetching DNS records for every domain listed in the `domains` attribute of this ViewHelper. Prefetching starts as soon as the browser becomes aware of the tag - to optimise even further, you may wish to control the output buffer's size to deliver your site HTML in chunks, the first chunk being the one containing this ViewHelper. Note that the web server daemon may send headers which prevent this prefetching and that these headers can be added in many ways. If prefetching does not work, you will need to inspect the HTTP headers returned from the actual environment. Or you may prefer to simply add `force=\"TRUE\"` to this tag - but beware that this will affect the entire document's behaviour, not just for this particular set of domain prefetches. Once force-enabled this setting cannot be disabled (unless done so by manually adding an additional meta header tag as examplified by the `build()` method. ### Example usage: <v:asset.prefetch domains=\"fedext.net,ajax.google.com\" /> See: https://developer.mozilla.org/en-US/docs/Controlling_DNS_prefetching /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to insert in header/footer",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to insert in header/footer"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "If not using tag content, specify path to file here",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "If not using tag content, specify path to file here"
        },
        {
          "name": "${external:external}=\"$1\"",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets",
          "valueSet": "v"
        },
        {
          "name": "external",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\"",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\""
        },
        {
          "name": "${overwrite:overwrite}=\"$1\"",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.",
          "valueSet": "v"
        },
        {
          "name": "overwrite",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite."
        },
        {
          "name": "${dependencies:dependencies}=\"$1\"",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies",
          "valueSet": "v"
        },
        {
          "name": "dependencies",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies"
        },
        {
          "name": "${group:group}=\"$1\"",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.",
          "valueSet": "v"
        },
        {
          "name": "group",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs."
        },
        {
          "name": "${debug:debug}=\"$1\"",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper",
          "valueSet": "v"
        },
        {
          "name": "debug",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper"
        },
        {
          "name": "${standalone:standalone}=\"$1\"",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied",
          "valueSet": "v"
        },
        {
          "name": "standalone",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied"
        },
        {
          "name": "${rewrite:rewrite}=\"$1\"",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls",
          "valueSet": "v"
        },
        {
          "name": "rewrite",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls"
        },
        {
          "name": "${fluid:fluid}=\"$1\"",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified",
          "valueSet": "v"
        },
        {
          "name": "fluid",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same"
        },
        {
          "name": "${movable:movable}=\"$1\"",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.",
          "valueSet": "v"
        },
        {
          "name": "movable",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS."
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything."
        },
        {
          "name": "${namedChunks:namedChunks}=\"$1\"",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency",
          "valueSet": "v"
        },
        {
          "name": "namedChunks",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency"
        },
        {
          "name": "${domains:domains}=\"$1\"",
          "description": "Domain DNS names to prefetch. By default will add all sys_domain record DNS names",
          "valueSet": "v"
        },
        {
          "name": "domains",
          "description": "Domain DNS names to prefetch. By default will add all sys_domain record DNS names"
        },
        {
          "name": "${protocol:protocol}=\"$1\"",
          "description": "Optional value of protocol as inserted in the resulting HREF value. If you experience problems with a non-protocol link, try enforcing http/https here",
          "valueSet": "v"
        },
        {
          "name": "protocol",
          "description": "Optional value of protocol as inserted in the resulting HREF value. If you experience problems with a non-protocol link, try enforcing http/https here"
        },
        {
          "name": "${protocolSeparator:protocolSeparator}=\"$1\"",
          "description": "If you do not enforce a particular protocol and wish to remove the double slashes from the hostname (your browser may not understand this!), set this attribute to an empty value (not-zero)",
          "valueSet": "v"
        },
        {
          "name": "protocolSeparator",
          "description": "If you do not enforce a particular protocol and wish to remove the double slashes from the hostname (your browser may not understand this!), set this attribute to an empty value (not-zero)"
        },
        {
          "name": "${force:force}=\"$1\"",
          "description": "If TRUE, adds an additional meta header tag which forces prefetching to be enabled even if otherwise requested by the http daemon",
          "valueSet": "v"
        },
        {
          "name": "force",
          "description": "If TRUE, adds an additional meta header tag which forces prefetching to be enabled even if otherwise requested by the http daemon"
        }
      ]
    },
    {
      "name": "v:asset.script",
      "description": "### Basic Script ViewHelper Allows inserting a `<script>` Asset. Settings specify where to insert the Asset and how to treat it. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to insert in header/footer",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to insert in header/footer"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "If not using tag content, specify path to file here",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "If not using tag content, specify path to file here"
        },
        {
          "name": "${external:external}=\"$1\"",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets",
          "valueSet": "v"
        },
        {
          "name": "external",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\"",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\""
        },
        {
          "name": "${overwrite:overwrite}=\"$1\"",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.",
          "valueSet": "v"
        },
        {
          "name": "overwrite",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite."
        },
        {
          "name": "${dependencies:dependencies}=\"$1\"",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies",
          "valueSet": "v"
        },
        {
          "name": "dependencies",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies"
        },
        {
          "name": "${group:group}=\"$1\"",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.",
          "valueSet": "v"
        },
        {
          "name": "group",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs."
        },
        {
          "name": "${debug:debug}=\"$1\"",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper",
          "valueSet": "v"
        },
        {
          "name": "debug",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper"
        },
        {
          "name": "${standalone:standalone}=\"$1\"",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied",
          "valueSet": "v"
        },
        {
          "name": "standalone",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied"
        },
        {
          "name": "${rewrite:rewrite}=\"$1\"",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls",
          "valueSet": "v"
        },
        {
          "name": "rewrite",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls"
        },
        {
          "name": "${fluid:fluid}=\"$1\"",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified",
          "valueSet": "v"
        },
        {
          "name": "fluid",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same"
        },
        {
          "name": "${movable:movable}=\"$1\"",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.",
          "valueSet": "v"
        },
        {
          "name": "movable",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS."
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything."
        },
        {
          "name": "${namedChunks:namedChunks}=\"$1\"",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency",
          "valueSet": "v"
        },
        {
          "name": "namedChunks",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency"
        },
        {
          "name": "${async:async}=\"$1\"",
          "description": "If TRUE, adds \"async\" attribute to script tag (only works when standalone is set)",
          "valueSet": "v"
        },
        {
          "name": "async",
          "description": "If TRUE, adds \"async\" attribute to script tag (only works when standalone is set)"
        },
        {
          "name": "${defer:defer}=\"$1\"",
          "description": "If TRUE, adds \"defer\" attribute to script tag (only works when standalone is set)",
          "valueSet": "v"
        },
        {
          "name": "defer",
          "description": "If TRUE, adds \"defer\" attribute to script tag (only works when standalone is set)"
        }
      ]
    },
    {
      "name": "v:asset.style",
      "description": "### Basic Style ViewHelper Allows inserting a `<link>` or `<style>` Asset. Settings specify where to insert the Asset and how to treat it. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to insert in header/footer",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to insert in header/footer"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "If not using tag content, specify path to file here",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "If not using tag content, specify path to file here"
        },
        {
          "name": "${external:external}=\"$1\"",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets",
          "valueSet": "v"
        },
        {
          "name": "external",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\"",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\""
        },
        {
          "name": "${overwrite:overwrite}=\"$1\"",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.",
          "valueSet": "v"
        },
        {
          "name": "overwrite",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite."
        },
        {
          "name": "${dependencies:dependencies}=\"$1\"",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies",
          "valueSet": "v"
        },
        {
          "name": "dependencies",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies"
        },
        {
          "name": "${group:group}=\"$1\"",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.",
          "valueSet": "v"
        },
        {
          "name": "group",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs."
        },
        {
          "name": "${debug:debug}=\"$1\"",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper",
          "valueSet": "v"
        },
        {
          "name": "debug",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper"
        },
        {
          "name": "${standalone:standalone}=\"$1\"",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied",
          "valueSet": "v"
        },
        {
          "name": "standalone",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied"
        },
        {
          "name": "${rewrite:rewrite}=\"$1\"",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls",
          "valueSet": "v"
        },
        {
          "name": "rewrite",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls"
        },
        {
          "name": "${fluid:fluid}=\"$1\"",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified",
          "valueSet": "v"
        },
        {
          "name": "fluid",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same"
        },
        {
          "name": "${movable:movable}=\"$1\"",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.",
          "valueSet": "v"
        },
        {
          "name": "movable",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS."
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything."
        },
        {
          "name": "${namedChunks:namedChunks}=\"$1\"",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency",
          "valueSet": "v"
        },
        {
          "name": "namedChunks",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency"
        }
      ]
    },
    {
      "name": "v:call",
      "description": "### Call ViewHelper Calls a method on an existing object. Usable as inline or tag. ### Examples <!-- inline, useful as argument, for example in f:for --> {object -> v:call(method: 'toArray')} <!-- tag, useful to quickly output simple values --> <v:call object=\"{object}\" method=\"unconventionalGetter\" /> <v:call method=\"unconventionalGetter\">{object}</v:call> <!-- arguments for the method --> <v:call object=\"{object}\" method=\"doSomethingWithArguments\" arguments=\"{0: 'foo', 1: 'bar'}\" /> /",
      "attributes": [
        {
          "name": "${object:object}=\"$1\"",
          "description": "Instance to call method on",
          "valueSet": "v"
        },
        {
          "name": "object",
          "description": "Instance to call method on"
        },
        {
          "name": "${method:method}=\"$1\"",
          "description": "Name of method to call on instance",
          "valueSet": "v"
        },
        {
          "name": "method",
          "description": "Name of method to call on instance"
        },
        {
          "name": "${arguments:arguments}=\"$1\"",
          "description": "Array of arguments if method requires arguments",
          "valueSet": "v"
        },
        {
          "name": "arguments",
          "description": "Array of arguments if method requires arguments"
        }
      ]
    },
    {
      "name": "v:condition.context.isBackend",
      "description": "### Condition: Is context Backend? A condition ViewHelper which renders the `then` child if current context being rendered is BE. ### Examples <!-- simple usage, content becomes then-child --> <v:condition.context.isBackend> Hooray for BE contexts! </v:condition.context.isBackend> <!-- extended use combined with f:then and f:else --> <v:condition.context.isBackend> <f:then> Hooray for BE contexts! </f:then> <f:else> Maybe FE, maybe CLI. </f:else> </v:condition.context.isBackend> /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:condition.context.isCli",
      "description": "### Condition: Is context CLI? A condition ViewHelper which renders the `then` child if current context being rendered is CLI. ### Examples <!-- simple usage, content becomes then-child --> <v:condition.context.isCli> Hooray for CLI contexts! </v:condition.context.isCli> <!-- extended use combined with f:then and f:else --> <v:condition.context.isCli> <f:then> Hooray for CLI contexts! </f:then> <f:else> Maybe BE, maybe FE. </f:else> </v:condition.context.isCli> /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:condition.context.isDevelopment",
      "description": "### Context: IsDevelopment Returns true if current root application context is development otherwise false. If no application context has been set, then the default context is production. #### Note about how to set the application context The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT. It can be set by .htaccess or in the server configuration See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:condition.context.isFrontend",
      "description": "### Condition: Is context Frontend? A condition ViewHelper which renders the `then` child if current context being rendered is FE. ### Examples <!-- simple usage, content becomes then-child --> <v:condition.context.isFrontend> Hooray for BE contexts! </v:condition.context.isFrontend> <!-- extended use combined with f:then and f:else --> <v:condition.context.isFrontend> <f:then> Hooray for BE contexts! </f:then> <f:else> Maybe BE, maybe CLI. </f:else> </v:condition.context.isFrontend> /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:condition.context.isProduction",
      "description": "### Context: IsProduction Returns true if current root application context is production otherwise false. If no application context has been set, then this is the default context. #### Note about how to set the application context The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT. It can be set by .htaccess or in the server configuration See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:condition.context.isTesting",
      "description": "### Context: IsProduction Returns true if current root application context is testing otherwise false. If no application context has been set, then the default context is production. #### Note about how to set the application context The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT. It can be set by .htaccess or in the server configuration See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:condition.form.hasValidator",
      "description": "### Form: Field Has Validator? Takes a property (dotted path supported) and renders the then-child if the property at the given path has any /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${property:property}=\"$1\"",
          "description": "The property name, dotted path supported, to determine required.",
          "valueSet": "v"
        },
        {
          "name": "property",
          "description": "The property name, dotted path supported, to determine required."
        },
        {
          "name": "${validatorName:validatorName}=\"$1\"",
          "description": "The name of the validator that must exist for the condition to be true.",
          "valueSet": "v"
        },
        {
          "name": "validatorName",
          "description": "The name of the validator that must exist for the condition to be true."
        },
        {
          "name": "${object:object}=\"$1\"",
          "description": "Optional object - if not specified, grabs the associated form object.",
          "valueSet": "v"
        },
        {
          "name": "object",
          "description": "Optional object - if not specified, grabs the associated form object."
        }
      ]
    },
    {
      "name": "v:condition.form.isRequired",
      "description": "### Is Field Required ViewHelper (condition) Takes a property (dotted path supported) and renders the then-child if the property at the given path has an /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${property:property}=\"$1\"",
          "description": "The property name, dotted path supported, to determine required.",
          "valueSet": "v"
        },
        {
          "name": "property",
          "description": "The property name, dotted path supported, to determine required."
        },
        {
          "name": "${validatorName:validatorName}=\"$1\"",
          "description": "The name of the validator that must exist for the condition to be true.",
          "valueSet": "v"
        },
        {
          "name": "validatorName",
          "description": "The name of the validator that must exist for the condition to be true."
        },
        {
          "name": "${object:object}=\"$1\"",
          "description": "Optional object - if not specified, grabs the associated form object.",
          "valueSet": "v"
        },
        {
          "name": "object",
          "description": "Optional object - if not specified, grabs the associated form object."
        }
      ]
    },
    {
      "name": "v:condition.iterator.contains",
      "description": "Condition ViewHelper. Renders the then-child if Iterator/array haystack contains needle value. ### Example: {v:condition.iterator.contains(needle: 'foo', haystack: {0: 'foo'}, then: 'yes', else: 'no')} /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${needle:needle}=\"$1\"",
          "description": "Needle to search for in haystack",
          "valueSet": "v"
        },
        {
          "name": "needle",
          "description": "Needle to search for in haystack"
        },
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "Haystack in which to look for needle",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "Haystack in which to look for needle"
        },
        {
          "name": "${considerKeys:considerKeys}=\"$1\"",
          "description": "Tell whether to consider keys in the search assuming haystack is an array.",
          "valueSet": "v"
        },
        {
          "name": "considerKeys",
          "description": "Tell whether to consider keys in the search assuming haystack is an array."
        }
      ]
    },
    {
      "name": "v:condition.page.hasSubpages",
      "description": "### Condition: Page has subpages A condition ViewHelper which renders the `then` child if current page or page with provided UID has subpages. By default disabled subpages are considered non existent which can be overridden by setting $includeHidden to TRUE. To include pages that are hidden in menus set $showHiddenInMenu to TRUE. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Parent page to check",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Parent page to check"
        },
        {
          "name": "${includeHidden:includeHidden}=\"$1\"",
          "description": "DEPRECATED: Include hidden pages",
          "valueSet": "v"
        },
        {
          "name": "includeHidden",
          "description": "DEPRECATED: Include hidden pages"
        },
        {
          "name": "${includeAccessProtected:includeAccessProtected}=\"$1\"",
          "description": "Include access protected pages",
          "valueSet": "v"
        },
        {
          "name": "includeAccessProtected",
          "description": "Include access protected pages"
        },
        {
          "name": "${includeHiddenInMenu:includeHiddenInMenu}=\"$1\"",
          "description": "Include pages hidden in menu",
          "valueSet": "v"
        },
        {
          "name": "includeHiddenInMenu",
          "description": "Include pages hidden in menu"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "DEPRECATED: Use includeHiddenInMenu",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "DEPRECATED: Use includeHiddenInMenu"
        }
      ]
    },
    {
      "name": "v:condition.page.isChildPage",
      "description": "### Condition: Page is child page Condition ViewHelper which renders the `then` child if current page or page with provided UID is a child of some other page in the page tree. If $respectSiteRoot is set to TRUE root pages are never considered child pages even if they are. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "value to check"
        },
        {
          "name": "${respectSiteRoot:respectSiteRoot}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "respectSiteRoot",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.page.isLanguage",
      "description": "### Condition: Is current language A condition ViewHelper which renders the `then` child if current language matches the provided language uid or language title. When using language titles like 'de' it is required to provide a default title to distinguish between the standard and a non existing language. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${language:language}=\"$1\"",
          "description": "language to check",
          "valueSet": "v"
        },
        {
          "name": "language",
          "description": "language to check"
        },
        {
          "name": "${defaultTitle:defaultTitle}=\"$1\"",
          "description": "title of the default language",
          "valueSet": "v"
        },
        {
          "name": "defaultTitle",
          "description": "title of the default language"
        }
      ]
    },
    {
      "name": "v:condition.string.contains",
      "description": "### Condition: String contains substring Condition ViewHelper which renders the `then` child if provided string $haystack contains provided string $needle. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "haystack",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "haystack"
        },
        {
          "name": "${needle:needle}=\"$1\"",
          "description": "need",
          "valueSet": "v"
        },
        {
          "name": "needle",
          "description": "need"
        }
      ]
    },
    {
      "name": "v:condition.string.isLowercase",
      "description": "### Condition: String is lowercase Condition ViewHelper which renders the `then` child if provided string is lowercase. By default only the first letter is tested. To test the full string set $fullString to TRUE. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${string:string}=\"$1\"",
          "description": "string to check",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "string to check"
        },
        {
          "name": "${fullString:fullString}=\"$1\"",
          "description": "need",
          "valueSet": "v"
        },
        {
          "name": "fullString",
          "description": "need"
        }
      ]
    },
    {
      "name": "v:condition.string.isNumeric",
      "description": "### Condition: Value is numeric Condition ViewHelper which renders the `then` child if provided value is numeric. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.string.isUppercase",
      "description": "### Condition: String is lowercase Condition ViewHelper which renders the `then` child if provided string is uppercase. By default only the first letter is tested. To test the full string set $fullString to TRUE. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${string:string}=\"$1\"",
          "description": "string to check",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "string to check"
        },
        {
          "name": "${fullString:fullString}=\"$1\"",
          "description": "need",
          "valueSet": "v"
        },
        {
          "name": "fullString",
          "description": "need"
        }
      ]
    },
    {
      "name": "v:condition.type.isArray",
      "description": "### Condition: Type of value is array Condition ViewHelper which renders the `then` child if type of provided value is array. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isBoolean",
      "description": "### Condition: Type of value is a boolean Condition ViewHelper which renders the `then` child if type of provided value is a boolean. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isDomainObject",
      "description": "### Condition: Value is a domain object Condition ViewHelper which renders the `then` child if provided value is a domain object, i.e. it inherits from extbase's base class. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        },
        {
          "name": "${fullString:fullString}=\"$1\"",
          "description": "need",
          "valueSet": "v"
        },
        {
          "name": "fullString",
          "description": "need"
        }
      ]
    },
    {
      "name": "v:condition.type.isFloat",
      "description": "### Condition: Type of value is float Condition ViewHelper which renders the `then` child if type of provided value is float. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isInstanceOf",
      "description": "### Condition: Value is an instance of a class Condition ViewHelper which renders the `then` child if provided value is an instance of provided class name. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "className to check against",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "className to check against"
        }
      ]
    },
    {
      "name": "v:condition.type.isInteger",
      "description": "### Condition: Type of value is integer Condition ViewHelper which renders the `then` child if type of provided value is integer. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isObject",
      "description": "### Condition: Value is an object Condition ViewHelper which renders the `then` child if provided value is an object. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isQueryResult",
      "description": "### Condition: Value is a query result Condition ViewHelper which renders the `then` child if provided value is an extbase query result. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isString",
      "description": "### Condition: Type of value is string Condition ViewHelper which renders the `then` child if type of provided value is string. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.type.isTraversable",
      "description": "### Condition: Value implements interface Traversable Condition ViewHelper which renders the `then` child if provided value implements interface Traversable. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.variable.isNull",
      "description": "### Condition: Value is NULL Condition ViewHelper which renders the `then` child if provided value is NULL. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "value to check",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "value to check"
        }
      ]
    },
    {
      "name": "v:condition.variable.isset",
      "description": "### Variable: Isset Renders the `then` child if the variable name given in the `name` argument exists in the template. The value can be zero, NULL or an empty string - but the ViewHelper will still return TRUE if the variable exists. Combines well with dynamic variable names: <!-- if {variableContainingVariableName} is \"foo\" this checks existence of {foo} --> <v:condition.variable.isset name=\"{variableContainingVariableName}\">...</v:condition.variable.isset> <!-- if {suffix} is \"Name\" this checks existence of \"variableName\" --> <v:condition.variable.isset name=\"variable{suffix}\">...</v:condition.variable.isset> <!-- outputs value of {foo} if {bar} is defined --> {foo -> v:condition.variable.isset(name: bar)} ONLY WORKS ON TYPO3v8+! /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "name of the variable",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "name of the variable"
        }
      ]
    },
    {
      "name": "v:const",
      "description": "### Const ViewHelper Renders the value of a PHP constant /",
      "attributes": [
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of constant to retrieve",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of constant to retrieve"
        }
      ]
    },
    {
      "name": "v:content.get",
      "description": "ViewHelper used to render get content elements in Fluid templates /",
      "attributes": [
        {
          "name": "${column:column}=\"$1\"",
          "description": "Column position number (colPos) of the column to render",
          "valueSet": "v"
        },
        {
          "name": "column",
          "description": "Column position number (colPos) of the column to render"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records.",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records."
        },
        {
          "name": "${sortDirection:sortDirection}=\"$1\"",
          "description": "Optional sort direction of content elements",
          "valueSet": "v"
        },
        {
          "name": "sortDirection",
          "description": "Optional sort direction of content elements"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "If set, selects only content from this page UID",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "If set, selects only content from this page UID"
        },
        {
          "name": "${contentUids:contentUids}=\"$1\"",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array",
          "valueSet": "v"
        },
        {
          "name": "contentUids",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array"
        },
        {
          "name": "${sectionIndexOnly:sectionIndexOnly}=\"$1\"",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\"",
          "valueSet": "v"
        },
        {
          "name": "sectionIndexOnly",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\""
        },
        {
          "name": "${loadRegister:loadRegister}=\"$1\"",
          "description": "List of LOAD_REGISTER variable",
          "valueSet": "v"
        },
        {
          "name": "loadRegister",
          "description": "List of LOAD_REGISTER variable"
        },
        {
          "name": "${render:render}=\"$1\"",
          "description": "Return rendered result",
          "valueSet": "v"
        },
        {
          "name": "render",
          "description": "Return rendered result"
        },
        {
          "name": "${hideUntranslated:hideUntranslated}=\"$1\"",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version",
          "valueSet": "v"
        },
        {
          "name": "hideUntranslated",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version"
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Optional limit to the total number of records to render",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Optional limit to the total number of records to render"
        },
        {
          "name": "${slide:slide}=\"$1\"",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used",
          "valueSet": "v"
        },
        {
          "name": "slide",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used"
        },
        {
          "name": "${slideCollect:slideCollect}=\"$1\"",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide.",
          "valueSet": "v"
        },
        {
          "name": "slideCollect",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide."
        },
        {
          "name": "${slideCollectReverse:slideCollectReverse}=\"$1\"",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))",
          "valueSet": "v"
        },
        {
          "name": "slideCollectReverse",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))"
        }
      ]
    },
    {
      "name": "v:content.info",
      "description": "ViewHelper to access data of the current content element record. /",
      "attributes": [
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${contentUid:contentUid}=\"$1\"",
          "description": "If specified, this UID will be used to fetch content element data instead of using the current content element.",
          "valueSet": "v"
        },
        {
          "name": "contentUid",
          "description": "If specified, this UID will be used to fetch content element data instead of using the current content element."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "If specified, only this field will be returned/assigned instead of the complete content element record.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "If specified, only this field will be returned/assigned instead of the complete content element record."
        }
      ]
    },
    {
      "name": "v:content.random.get",
      "description": "ViewHelper for fetching a random content element in Fluid page templates. /",
      "attributes": [
        {
          "name": "${column:column}=\"$1\"",
          "description": "Column position number (colPos) of the column to render",
          "valueSet": "v"
        },
        {
          "name": "column",
          "description": "Column position number (colPos) of the column to render"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records.",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records."
        },
        {
          "name": "${sortDirection:sortDirection}=\"$1\"",
          "description": "Optional sort direction of content elements",
          "valueSet": "v"
        },
        {
          "name": "sortDirection",
          "description": "Optional sort direction of content elements"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "If set, selects only content from this page UID",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "If set, selects only content from this page UID"
        },
        {
          "name": "${contentUids:contentUids}=\"$1\"",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array",
          "valueSet": "v"
        },
        {
          "name": "contentUids",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array"
        },
        {
          "name": "${sectionIndexOnly:sectionIndexOnly}=\"$1\"",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\"",
          "valueSet": "v"
        },
        {
          "name": "sectionIndexOnly",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\""
        },
        {
          "name": "${loadRegister:loadRegister}=\"$1\"",
          "description": "List of LOAD_REGISTER variable",
          "valueSet": "v"
        },
        {
          "name": "loadRegister",
          "description": "List of LOAD_REGISTER variable"
        },
        {
          "name": "${render:render}=\"$1\"",
          "description": "Returning variable as original table rows",
          "valueSet": "v"
        },
        {
          "name": "render",
          "description": "Returning variable as original table rows"
        },
        {
          "name": "${hideUntranslated:hideUntranslated}=\"$1\"",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version",
          "valueSet": "v"
        },
        {
          "name": "hideUntranslated",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version"
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Optional limit number of content elements to render",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Optional limit number of content elements to render"
        },
        {
          "name": "${slide:slide}=\"$1\"",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used",
          "valueSet": "v"
        },
        {
          "name": "slide",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used"
        },
        {
          "name": "${slideCollect:slideCollect}=\"$1\"",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide.",
          "valueSet": "v"
        },
        {
          "name": "slideCollect",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide."
        },
        {
          "name": "${slideCollectReverse:slideCollectReverse}=\"$1\"",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))",
          "valueSet": "v"
        },
        {
          "name": "slideCollectReverse",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))"
        }
      ]
    },
    {
      "name": "v:content.random.render",
      "description": "ViewHelper for rendering a random content element in Fluid page templates. /",
      "attributes": [
        {
          "name": "${column:column}=\"$1\"",
          "description": "Column position number (colPos) of the column to render",
          "valueSet": "v"
        },
        {
          "name": "column",
          "description": "Column position number (colPos) of the column to render"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records.",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records."
        },
        {
          "name": "${sortDirection:sortDirection}=\"$1\"",
          "description": "Optional sort direction of content elements",
          "valueSet": "v"
        },
        {
          "name": "sortDirection",
          "description": "Optional sort direction of content elements"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "If set, selects only content from this page UID",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "If set, selects only content from this page UID"
        },
        {
          "name": "${contentUids:contentUids}=\"$1\"",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array",
          "valueSet": "v"
        },
        {
          "name": "contentUids",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array"
        },
        {
          "name": "${sectionIndexOnly:sectionIndexOnly}=\"$1\"",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\"",
          "valueSet": "v"
        },
        {
          "name": "sectionIndexOnly",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\""
        },
        {
          "name": "${loadRegister:loadRegister}=\"$1\"",
          "description": "List of LOAD_REGISTER variable",
          "valueSet": "v"
        },
        {
          "name": "loadRegister",
          "description": "List of LOAD_REGISTER variable"
        },
        {
          "name": "${render:render}=\"$1\"",
          "description": "Render result",
          "valueSet": "v"
        },
        {
          "name": "render",
          "description": "Render result"
        },
        {
          "name": "${hideUntranslated:hideUntranslated}=\"$1\"",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version",
          "valueSet": "v"
        },
        {
          "name": "hideUntranslated",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version"
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Optional limit number of content elements to render",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Optional limit number of content elements to render"
        },
        {
          "name": "${slide:slide}=\"$1\"",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used",
          "valueSet": "v"
        },
        {
          "name": "slide",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used"
        },
        {
          "name": "${slideCollect:slideCollect}=\"$1\"",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide.",
          "valueSet": "v"
        },
        {
          "name": "slideCollect",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide."
        },
        {
          "name": "${slideCollectReverse:slideCollectReverse}=\"$1\"",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))",
          "valueSet": "v"
        },
        {
          "name": "slideCollectReverse",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))"
        }
      ]
    },
    {
      "name": "v:content.render",
      "description": "ViewHelper used to render content elements in Fluid templates. ### Render a single content element by its UID Let's assume that the variable `settings.element.uid` contains the uid of a content element. It can be rendered as follows: <v:content.render contentUids=\"{0: settings.element.uid}\"/> /",
      "attributes": [
        {
          "name": "${column:column}=\"$1\"",
          "description": "Column position number (colPos) of the column to render",
          "valueSet": "v"
        },
        {
          "name": "column",
          "description": "Column position number (colPos) of the column to render"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records.",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records."
        },
        {
          "name": "${sortDirection:sortDirection}=\"$1\"",
          "description": "Optional sort direction of content elements",
          "valueSet": "v"
        },
        {
          "name": "sortDirection",
          "description": "Optional sort direction of content elements"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "If set, selects only content from this page UID",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "If set, selects only content from this page UID"
        },
        {
          "name": "${contentUids:contentUids}=\"$1\"",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array",
          "valueSet": "v"
        },
        {
          "name": "contentUids",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array"
        },
        {
          "name": "${sectionIndexOnly:sectionIndexOnly}=\"$1\"",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\"",
          "valueSet": "v"
        },
        {
          "name": "sectionIndexOnly",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\""
        },
        {
          "name": "${loadRegister:loadRegister}=\"$1\"",
          "description": "List of LOAD_REGISTER variable",
          "valueSet": "v"
        },
        {
          "name": "loadRegister",
          "description": "List of LOAD_REGISTER variable"
        },
        {
          "name": "${render:render}=\"$1\"",
          "description": "Render result",
          "valueSet": "v"
        },
        {
          "name": "render",
          "description": "Render result"
        },
        {
          "name": "${hideUntranslated:hideUntranslated}=\"$1\"",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version",
          "valueSet": "v"
        },
        {
          "name": "hideUntranslated",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version"
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Optional limit to the total number of records to render",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Optional limit to the total number of records to render"
        },
        {
          "name": "${slide:slide}=\"$1\"",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used",
          "valueSet": "v"
        },
        {
          "name": "slide",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used"
        },
        {
          "name": "${slideCollect:slideCollect}=\"$1\"",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide.",
          "valueSet": "v"
        },
        {
          "name": "slideCollect",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide."
        },
        {
          "name": "${slideCollectReverse:slideCollectReverse}=\"$1\"",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))",
          "valueSet": "v"
        },
        {
          "name": "slideCollectReverse",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:content.resources",
      "description": "Resources ViewHelper Loads FAL records associated with records of arbitrary types. /",
      "attributes": [
        {
          "name": "${table:table}=\"$1\"",
          "description": "The table to lookup records.",
          "valueSet": "v"
        },
        {
          "name": "table",
          "description": "The table to lookup records."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "The field of the table associated to resources.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "The field of the table associated to resources."
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "The actual record. Alternatively you can use the \"uid\" argument.",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "The actual record. Alternatively you can use the \"uid\" argument."
        },
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument.",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        }
      ]
    },
    {
      "name": "v:content.resources.fal",
      "description": "Content FAL relations ViewHelper /",
      "attributes": [
        {
          "name": "${table:table}=\"$1\"",
          "description": "The table to lookup records.",
          "valueSet": "v"
        },
        {
          "name": "table",
          "description": "The table to lookup records."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "The field of the table associated to resources.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "The field of the table associated to resources."
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "The actual record. Alternatively you can use the \"uid\" argument.",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "The actual record. Alternatively you can use the \"uid\" argument."
        },
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument.",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        }
      ]
    },
    {
      "name": "v:context.get",
      "description": "### Context: Get Returns the current application context which may include possible sub-contexts. The application context can be 'Production', 'Development' or 'Testing'. Additionally each context can be extended with custom sub-contexts like: 'Production/Staging' or 'Production/Staging/Server1'. If no application context has been set by the configuration, then the default context is 'Production'. #### Note about how to set the application context The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT. It can be set by .htaccess or in the server configuration See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context /",
      "attributes": []
    },
    {
      "name": "v:count.bytes",
      "description": "Counts bytes (multibyte-safe) in a string. #### Usage examples <v:count.bytes>{myString}</v:count.bytes> (output for example `42` {myString -> v:count.bytes()} when used inline <v:count.bytes string=\"{myString}\" /> {v:count.bytes(string: myString)} /",
      "attributes": [
        {
          "name": "${string:string}=\"$1\"",
          "description": "String to count, if not provided as tag content",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "String to count, if not provided as tag content"
        },
        {
          "name": "${encoding:encoding}=\"$1\"",
          "description": "Character set encoding of string, e.g. UTF-8 or ISO-8859-1",
          "valueSet": "v"
        },
        {
          "name": "encoding",
          "description": "Character set encoding of string, e.g. UTF-8 or ISO-8859-1"
        }
      ]
    },
    {
      "name": "v:count.lines",
      "description": "Counts number of lines in a string. #### Usage examples <v:count.lines>{myString}</v:count.lines> (output for example `42` {myString -> v:count.lines()} when used inline <v:count.lines string=\"{myString}\" /> {v:count.lines(string: myString)} /",
      "attributes": [
        {
          "name": "${string:string}=\"$1\"",
          "description": "String to count, if not provided as tag content",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "String to count, if not provided as tag content"
        }
      ]
    },
    {
      "name": "v:count.substring",
      "description": "Counts number of lines in a string. #### Usage examples <v:count.substring string=\"{myString}\">{haystack}</v:count.substring> (output for example `2` {haystack -> v:count.substring(string: myString)} when used inline <v:count.substring string=\"{myString}\" haystack=\"{haystack}\" /> {v:count.substring(string: myString, haystack: haystack)} /",
      "attributes": [
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "String to count substring in, if not provided as tag content",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "String to count substring in, if not provided as tag content"
        },
        {
          "name": "${string:string}=\"$1\"",
          "description": "Substring to count occurrences of",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "Substring to count occurrences of"
        }
      ]
    },
    {
      "name": "v:count.words",
      "description": "Counts words in a string. #### Usage examples <v:count.words>{myString}</v:count.words> (output for example `42` {myString -> v:count.words()} when used inline <v:count.words string=\"{myString}\" /> {v:count.words(string: myString)} /",
      "attributes": [
        {
          "name": "${string:string}=\"$1\"",
          "description": "String to count, if not provided as tag content",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "String to count, if not provided as tag content"
        }
      ]
    },
    {
      "name": "v:debug",
      "description": "### ViewHelper Debug ViewHelper (sic) Debugs instances of other ViewHelpers and language structures. Use in conjunction with other ViewHelpers to inspect their current and possible arguments and render their documentation: <v:debug><f:format.html>{variable}</f:format.html></v:debug> Or the same expression in inline syntax: {variable -> f:format.html() -> v:debug()} Can also be used to inspect `ObjectAccessor` instances (e.g. variables you try to access) and rather than just dumping the entire contents of the variable as is done by `<f:debug />`, this ViewHelper makes a very simple dump with a warning if the variable is not defined. If an object is encountered (for example a domain object) this ViewHelper will not dump the object but instead will scan it for accessible properties (e.g. properties which have a getter method!) and only present those properties which can be accessed, along with the type of variable that property currently contains: {domainObject -> v:debug()} Assuming that `{domainObject}` is an instance of an object which has two methods: `getUid()` and `getTitle()`, debugging that instance will render something like this in plain text: Path: {domainObject} Value type: object Accessible properties on {domainObject}: {form.uid} (integer) {form.title} (string) The class itself can contain any number of protected properties, but only those which have a getter method can be accessed by Fluid and as therefore we only dump those properties which you **can in fact access**. /",
      "attributes": []
    },
    {
      "name": "v:extension.icon",
      "description": "### Extension: Icon ViewHelper Outputs the icon of the extension key. Supports both extension key and extension name arguments. /",
      "attributes": [
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name, in UpperCamelCase, of the extension to be checked",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name, in UpperCamelCase, of the extension to be checked"
        }
      ]
    },
    {
      "name": "v:extension.loaded",
      "description": "### Extension: Loaded (Condition) ViewHelper Condition to check if an extension is loaded. ### Example: {v:extension.loaded(extensionName: 'news', then: 'yes', else: 'no')} <v:extension.loaded extensionName=\"news\"> ... </v:extension.loaded> /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name of extension that must be loaded in order to evaluate as TRUE, UpperCamelCase",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name of extension that must be loaded in order to evaluate as TRUE, UpperCamelCase"
        }
      ]
    },
    {
      "name": "v:extension.path.absolute",
      "description": "### Path: Absolute Extension Folder Path Returns the absolute path to an extension folder. /",
      "attributes": [
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name, in UpperCamelCase, of the extension to be checked",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name, in UpperCamelCase, of the extension to be checked"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "Optional path to append, second argument when calling \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::extPath",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Optional path to append, second argument when calling \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::extPath"
        }
      ]
    },
    {
      "name": "v:extension.path.relative",
      "description": "### Path: Relative Extension Folder Path Returns the relative path to an Extension folder. /",
      "attributes": [
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name, in UpperCamelCase, of the extension to be checked",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name, in UpperCamelCase, of the extension to be checked"
        }
      ]
    },
    {
      "name": "v:extension.path.resources",
      "description": "### Path: Relative Extension Resource Path Site Relative path to Extension Resources/Public folder. /",
      "attributes": [
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name, in UpperCamelCase, of the extension to be checked",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name, in UpperCamelCase, of the extension to be checked"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "Optional path to append after output of \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::extRelPath",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Optional path to append after output of \\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::extRelPath"
        }
      ]
    },
    {
      "name": "v:extension.path.siteRelative",
      "description": "### Path: Relative Extension Folder Path Returns the site relative path to an extension folder. /",
      "attributes": [
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name, in UpperCamelCase, of the extension to be checked",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name, in UpperCamelCase, of the extension to be checked"
        }
      ]
    },
    {
      "name": "v:form.fieldName",
      "description": "Form Field Name View Helper This viewhelper returns the properly prefixed name of the given form field and generates the corresponding HMAC to allow posting of dynamically added fields. /",
      "attributes": [
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of the form field to generate the HMAC for.",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of the form field to generate the HMAC for."
        },
        {
          "name": "${property:property}=\"$1\"",
          "description": "Name of object property. If used in conjunction with <f:form object=\"...\">, \"name\" argument will be ignored.",
          "valueSet": "v"
        },
        {
          "name": "property",
          "description": "Name of object property. If used in conjunction with <f:form object=\"...\">, \"name\" argument will be ignored."
        }
      ]
    },
    {
      "name": "v:form.select",
      "description": "Select ViewHelper (with support for Optgroup and Option subnodes). /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of input tag",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of input tag"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "Value of input tag",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "Value of input tag"
        },
        {
          "name": "${property:property}=\"$1\"",
          "description": "Name of Object Property. If used in conjunction with <f:form object=\"...\">, \"name\" and \"value\" properties will be ignored.",
          "valueSet": "v"
        },
        {
          "name": "property",
          "description": "Name of Object Property. If used in conjunction with <f:form object=\"...\">, \"name\" and \"value\" properties will be ignored."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${size:size}=\"$1\"",
          "description": "Size of input field",
          "valueSet": "v"
        },
        {
          "name": "size",
          "description": "Size of input field"
        },
        {
          "name": "${disabled:disabled}=\"$1\"",
          "description": "Specifies that the input element should be disabled when the page loads",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "Specifies that the input element should be disabled when the page loads"
        },
        {
          "name": "${multiple:multiple}=\"$1\"",
          "description": "if set, multiple select field",
          "valueSet": "v"
        },
        {
          "name": "multiple",
          "description": "if set, multiple select field"
        },
        {
          "name": "${options:options}=\"$1\"",
          "description": "Associative array with internal IDs as key, and the values are displayed in the select box",
          "valueSet": "v"
        },
        {
          "name": "options",
          "description": "Associative array with internal IDs as key, and the values are displayed in the select box"
        },
        {
          "name": "${optionValueField:optionValueField}=\"$1\"",
          "description": "If specified, will call the appropriate getter on each object to determine the value.",
          "valueSet": "v"
        },
        {
          "name": "optionValueField",
          "description": "If specified, will call the appropriate getter on each object to determine the value."
        },
        {
          "name": "${optionLabelField:optionLabelField}=\"$1\"",
          "description": "If specified, will call the appropriate getter on each object to determine the label.",
          "valueSet": "v"
        },
        {
          "name": "optionLabelField",
          "description": "If specified, will call the appropriate getter on each object to determine the label."
        },
        {
          "name": "${sortByOptionLabel:sortByOptionLabel}=\"$1\"",
          "description": "If true, List will be sorted by label.",
          "valueSet": "v"
        },
        {
          "name": "sortByOptionLabel",
          "description": "If true, List will be sorted by label."
        },
        {
          "name": "${selectAllByDefault:selectAllByDefault}=\"$1\"",
          "description": "If specified options are selected if none was set before.",
          "valueSet": "v"
        },
        {
          "name": "selectAllByDefault",
          "description": "If specified options are selected if none was set before."
        },
        {
          "name": "${errorClass:errorClass}=\"$1\"",
          "description": "CSS class to set if there are errors for this view helper",
          "valueSet": "v"
        },
        {
          "name": "errorClass",
          "description": "CSS class to set if there are errors for this view helper"
        }
      ]
    },
    {
      "name": "v:form.select.optgroup",
      "description": "Optgroup ViewHelper to use under vhs:form.select. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${label:label}=\"$1\"",
          "description": "Label for this option group",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "Label for this option group"
        }
      ]
    },
    {
      "name": "v:form.select.option",
      "description": "Option ViewHelper to use under vhs:form.select. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of input tag",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of input tag"
        },
        {
          "name": "${value:value}=\"$1\"",
          "description": "Value of input tag",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "Value of input tag"
        },
        {
          "name": "${property:property}=\"$1\"",
          "description": "Name of Object Property. If used in conjunction with <f:form object=\"...\">, \"name\" and \"value\" properties will be ignored.",
          "valueSet": "v"
        },
        {
          "name": "property",
          "description": "Name of Object Property. If used in conjunction with <f:form object=\"...\">, \"name\" and \"value\" properties will be ignored."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${selected:selected}=\"$1\"",
          "description": "Set to TRUE to mark field as selected; otherwise detected from field value",
          "valueSet": "v"
        },
        {
          "name": "selected",
          "description": "Set to TRUE to mark field as selected; otherwise detected from field value"
        }
      ]
    },
    {
      "name": "v:format.append",
      "description": "### Format: Append string content Appends a string after another string. Although this task is very easily done in standard Fluid - i.e. {subject}{add} - this ViewHelper makes advanced chained inline processing possible: <!-- useful when needing to chain string processing. Remove all \"foo\" and \"bar\" then add a text containing both \"foo\" and \"bar\", then format as HTML --> {text -> v:format.eliminate(strings: 'foo,bar') -> v:format.append(add: ' - my foo and bar are the only ones in this text.') -> f:format.html()} <!-- NOTE: you do not have to break the lines; done here only for presentation purposes --> Makes no sense used as tag based ViewHelper: <!-- DO NOT USE - depicts COUNTERPRODUCTIVE usage! --> <v:format.append add=\"{f:translate(key: 're')}\">{subject}</v:format.append> <!-- ... which is the exact same as ... --> <f:translate key=\"re\" />{subject} <!-- OR --> {f:translate(key: 're')}{subject} In other words: use this only when you do not have the option of simply using {subject}{add}, i.e. in complex inline statements used as attribute values on other ViewHelpers (where tag usage is undesirable). /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "String to append other string to",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "String to append other string to"
        },
        {
          "name": "${add:add}=\"$1\"",
          "description": "String to append",
          "valueSet": "v"
        },
        {
          "name": "add",
          "description": "String to append"
        }
      ]
    },
    {
      "name": "v:format.case",
      "description": "Case Formatting ViewHelper Formats string case according to provided arguments. /",
      "attributes": [
        {
          "name": "${string:string}=\"$1\"",
          "description": "String to case format",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "String to case format"
        },
        {
          "name": "${case:case}=\"$1\"",
          "description": "Case to convert to",
          "valueSet": "v"
        },
        {
          "name": "case",
          "description": "Case to convert to"
        }
      ]
    },
    {
      "name": "v:format.dateRange",
      "description": "### Date range calculation/formatting ViewHelper Uses DateTime and DateInterval operations to calculate a range between two DateTimes. #### Usages - As formatter, the ViewHelper can output a string value such as \"2013-04-30 - 2013-05-30\" where you can configure both the start and end date (or their common) formats as well as the \"glue\" which binds the two dates together. - As interval calculator, the ViewHelper can be used with a special \"intervalFormat\" which is a string used in the constructor method for the DateInterval class - for example, \"P3M\" to add three months. Used this way, you can specify the start date (or rely on the default \"now\" DateTime) and specify the \"intervalFormat\" to add your desired duration to your starting date and use that as end date. Without the \"return\" attribute, this mode simply outputs the formatted dates with interval deciding the end date. - When used with the \"return\" attribute you can specify which type of data to return: - if \"return\" is \"DateTime\", a single DateTime instance is returned (which is the end date). Use this with a start date to return the DateTime corresponding to \"intervalFormat\" into the future/past. - if \"return\" is a string such as \"w\", \"d\", \"h\" etc. the corresponding counter value (weeks, days, hours etc.) is returned. - if \"return\" is an array of counter IDs, for example [\"w\", \"d\"], the corresponding counters from the range are returned as an array. #### Note about LLL support and array consumers When used with the \"return\" attribute and when this attribute is an array, the output becomes suitable for consumption by f:translate, v:l or f:format.sprintf for example - as the \"arguments\" attribute: <f:translate key=\"myDateDisplay\" arguments=\"{v:format.dateRange(intervalFormat: 'P3W', return: {0: 'w', 1: 'd'})}\" /> Which if \"myDateDisplay\" is a string such as \"Deadline: %d week(s) and %d day(s)\" would output a result such as \"Deadline: 4 week(s) and 2 day(s)\". > Tip: the values returned by this ViewHelper in both array and single > value return modes, are also nicely consumable by the \"math\" suite > of ViewHelpers, for example `v:math.division` would be able to divide > number of days by two, three etc. to further divide the date range. /",
      "attributes": [
        {
          "name": "${start:start}=\"$1\"",
          "description": "Start date which can be a DateTime object or a string consumable by DateTime constructor",
          "valueSet": "v"
        },
        {
          "name": "start",
          "description": "Start date which can be a DateTime object or a string consumable by DateTime constructor"
        },
        {
          "name": "${end:end}=\"$1\"",
          "description": "End date which can be a DateTime object or a string consumable by DateTime constructor",
          "valueSet": "v"
        },
        {
          "name": "end",
          "description": "End date which can be a DateTime object or a string consumable by DateTime constructor"
        },
        {
          "name": "${intervalFormat:intervalFormat}=\"$1\"",
          "description": "Interval format consumable by DateInterval",
          "valueSet": "v"
        },
        {
          "name": "intervalFormat",
          "description": "Interval format consumable by DateInterval"
        },
        {
          "name": "${format:format}=\"$1\"",
          "description": "Date format to apply to both start and end date",
          "valueSet": "v"
        },
        {
          "name": "format",
          "description": "Date format to apply to both start and end date"
        },
        {
          "name": "${startFormat:startFormat}=\"$1\"",
          "description": "Date format to apply to start date",
          "valueSet": "v"
        },
        {
          "name": "startFormat",
          "description": "Date format to apply to start date"
        },
        {
          "name": "${endFormat:endFormat}=\"$1\"",
          "description": "Date format to apply to end date",
          "valueSet": "v"
        },
        {
          "name": "endFormat",
          "description": "Date format to apply to end date"
        },
        {
          "name": "${glue:glue}=\"$1\"",
          "description": "Glue string to concatenate dates with",
          "valueSet": "v"
        },
        {
          "name": "glue",
          "description": "Glue string to concatenate dates with"
        },
        {
          "name": "${spaceGlue:spaceGlue}=\"$1\"",
          "description": "If TRUE glue string is surrounded with whitespace",
          "valueSet": "v"
        },
        {
          "name": "spaceGlue",
          "description": "If TRUE glue string is surrounded with whitespace"
        },
        {
          "name": "${return:return}=\"$1\"",
          "description": "Return type; can be exactly \"DateTime\" to return a DateTime instance, a string like \"w\" or \"d\" to return weeks, days between the two dates - or an array of w, d, etc. strings to return the corresponding range count values as an array.",
          "valueSet": "v"
        },
        {
          "name": "return",
          "description": "Return type; can be exactly \"DateTime\" to return a DateTime instance, a string like \"w\" or \"d\" to return weeks, days between the two dates - or an array of w, d, etc. strings to return the corresponding range count values as an array."
        }
      ]
    },
    {
      "name": "v:format.eliminate",
      "description": "Character/string/whitespace elimination ViewHelper There is no example - each argument describes how it should be used and arguments can be used individually or in any combination. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "String in which to perform replacement",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "String in which to perform replacement"
        },
        {
          "name": "${caseSensitive:caseSensitive}=\"$1\"",
          "description": "Wether or not to perform case sensitive replacement",
          "valueSet": "v"
        },
        {
          "name": "caseSensitive",
          "description": "Wether or not to perform case sensitive replacement"
        },
        {
          "name": "${characters:characters}=\"$1\"",
          "description": "Characters to remove. Array or string, i.e. {0: 'a', 1: 'b', 2: 'c'} or 'abc' to remove all occurrences of a, b and c",
          "valueSet": "v"
        },
        {
          "name": "characters",
          "description": "Characters to remove. Array or string, i.e. {0: 'a', 1: 'b', 2: 'c'} or 'abc' to remove all occurrences of a, b and c"
        },
        {
          "name": "${strings:strings}=\"$1\"",
          "description": "Strings to remove. Array or CSV, i.e. {0: 'foo', 1: 'bar'} or 'foo,bar' to remove all occorrences of foo and bar. If your strings overlap then place the longest match first",
          "valueSet": "v"
        },
        {
          "name": "strings",
          "description": "Strings to remove. Array or CSV, i.e. {0: 'foo', 1: 'bar'} or 'foo,bar' to remove all occorrences of foo and bar. If your strings overlap then place the longest match first"
        },
        {
          "name": "${whitespace:whitespace}=\"$1\"",
          "description": "Eliminate ALL whitespace characters",
          "valueSet": "v"
        },
        {
          "name": "whitespace",
          "description": "Eliminate ALL whitespace characters"
        },
        {
          "name": "${whitespaceBetweenHtmlTags:whitespaceBetweenHtmlTags}=\"$1\"",
          "description": "Eliminate ALL whitespace characters between HTML tags",
          "valueSet": "v"
        },
        {
          "name": "whitespaceBetweenHtmlTags",
          "description": "Eliminate ALL whitespace characters between HTML tags"
        },
        {
          "name": "${tabs:tabs}=\"$1\"",
          "description": "Eliminate only tab whitespaces",
          "valueSet": "v"
        },
        {
          "name": "tabs",
          "description": "Eliminate only tab whitespaces"
        },
        {
          "name": "${unixBreaks:unixBreaks}=\"$1\"",
          "description": "Eliminate only UNIX line breaks",
          "valueSet": "v"
        },
        {
          "name": "unixBreaks",
          "description": "Eliminate only UNIX line breaks"
        },
        {
          "name": "${windowsBreaks:windowsBreaks}=\"$1\"",
          "description": "Eliminates only Windows carriage returns",
          "valueSet": "v"
        },
        {
          "name": "windowsBreaks",
          "description": "Eliminates only Windows carriage returns"
        },
        {
          "name": "${digits:digits}=\"$1\"",
          "description": "Eliminates all number characters (but not the dividers between floats converted to strings)",
          "valueSet": "v"
        },
        {
          "name": "digits",
          "description": "Eliminates all number characters (but not the dividers between floats converted to strings)"
        },
        {
          "name": "${letters:letters}=\"$1\"",
          "description": "Eliminates all letters (non-numbers, non-whitespace, non-syntactical)",
          "valueSet": "v"
        },
        {
          "name": "letters",
          "description": "Eliminates all letters (non-numbers, non-whitespace, non-syntactical)"
        },
        {
          "name": "${nonAscii:nonAscii}=\"$1\"",
          "description": "Eliminates any ASCII char",
          "valueSet": "v"
        },
        {
          "name": "nonAscii",
          "description": "Eliminates any ASCII char"
        }
      ]
    },
    {
      "name": "v:format.hash",
      "description": "Hashes a string. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to hash",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to hash"
        },
        {
          "name": "${algorithm:algorithm}=\"$1\"",
          "description": "Hashing algorithm to use (see http://php.net/manual/en/function.hash-algos.php for details)",
          "valueSet": "v"
        },
        {
          "name": "algorithm",
          "description": "Hashing algorithm to use (see http://php.net/manual/en/function.hash-algos.php for details)"
        }
      ]
    },
    {
      "name": "v:format.hide",
      "description": "Hides output from browser, but still renders tag content which means any ViewHelper inside the tag content still gets processed. /",
      "attributes": [
        {
          "name": "${disabled:disabled}=\"$1\"",
          "description": "If TRUE, renders content - use to quickly enable/disable Fluid code",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "If TRUE, renders content - use to quickly enable/disable Fluid code"
        }
      ]
    },
    {
      "name": "v:format.json.decode",
      "description": "Converts the JSON encoded argument into a PHP variable. /",
      "attributes": [
        {
          "name": "${json:json}=\"$1\"",
          "description": "JSON string to decode",
          "valueSet": "v"
        },
        {
          "name": "json",
          "description": "JSON string to decode"
        }
      ]
    },
    {
      "name": "v:format.json.encode",
      "description": "### JSON Encoding ViewHelper Returns a string containing the JSON representation of the argument. The argument may be any of the following types: - arrays, associative and traditional - DomainObjects - arrays containing DomainObjects - ObjectStorage containing DomainObjects - standard types (string, integer, boolean, float, NULL) - DateTime including ones found as property values on DomainObjects Recursion protection is enabled for DomainObjects with the option to add a special marker (any variable type above also supported here) which is inserted where an object which would cause recursion would be placed. Be specially careful when you JSON encode DomainObjects which have recursive relations to itself using either 1:n or m:n - in this case the one member of the converted relation will be whichever value you specified as \"recursionMarker\" - or the default value, NULL. When using the output of such conversion in JavaScript please make sure you check the type before assuming that every member of a converted 1:n or m:n recursive relation is in fact a JavaScript. Not doing so may result in fatal JavaScript errors in the client browser. /",
      "attributes": [
        {
          "name": "${value:value}=\"$1\"",
          "description": "Value to encode as JSON",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "Value to encode as JSON"
        },
        {
          "name": "${useTraversableKeys:useTraversableKeys}=\"$1\"",
          "description": "If TRUE, preserves keys from Traversables converted to arrays. Not recommended for ObjectStorages!",
          "valueSet": "v"
        },
        {
          "name": "useTraversableKeys",
          "description": "If TRUE, preserves keys from Traversables converted to arrays. Not recommended for ObjectStorages!"
        },
        {
          "name": "${preventRecursion:preventRecursion}=\"$1\"",
          "description": "If FALSE, allows recursion to occur which could potentially be fatal to the output unless managed",
          "valueSet": "v"
        },
        {
          "name": "preventRecursion",
          "description": "If FALSE, allows recursion to occur which could potentially be fatal to the output unless managed"
        },
        {
          "name": "${recursionMarker:recursionMarker}=\"$1\"",
          "description": "Any value - string, integer, boolean, object or NULL - inserted instead of recursive instances of objects",
          "valueSet": "v"
        },
        {
          "name": "recursionMarker",
          "description": "Any value - string, integer, boolean, object or NULL - inserted instead of recursive instances of objects"
        },
        {
          "name": "${dateTimeFormat:dateTimeFormat}=\"$1\"",
          "description": "A date() format for DateTime values to JSON-compatible values. NULL means JS UNIXTIME (time()*1000)",
          "valueSet": "v"
        },
        {
          "name": "dateTimeFormat",
          "description": "A date() format for DateTime values to JSON-compatible values. NULL means JS UNIXTIME (time()*1000)"
        }
      ]
    },
    {
      "name": "v:format.markdown",
      "description": "Markdown Transformation ViewHelper Requires an installed \"markdown\" utility, the specific implementation is less important since Markdown has no configuration options. However, the utility or shell scipt must: - accept input from STDIN - output to STDOUT - place errors in STDERR - be executable according to `open_basedir` and others - exist within (one or more of) TYPO3's configured executable paths In other words, *NIX standard behavior must be used. See: http://daringfireball.net/projects/markdown/ /",
      "attributes": [
        {
          "name": "${text:text}=\"$1\"",
          "description": "Markdown to convert to HTML",
          "valueSet": "v"
        },
        {
          "name": "text",
          "description": "Markdown to convert to HTML"
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "Trim content before converting",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "Trim content before converting"
        },
        {
          "name": "${htmlentities:htmlentities}=\"$1\"",
          "description": "If true, escapes converted HTML",
          "valueSet": "v"
        },
        {
          "name": "htmlentities",
          "description": "If true, escapes converted HTML"
        }
      ]
    },
    {
      "name": "v:format.placeholder.image",
      "description": "Placeholder Image ViewHelper Inserts a placeholder image from http://placehold.it/ /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${text:text}=\"$1\"",
          "description": "Text to render as image",
          "valueSet": "v"
        },
        {
          "name": "text",
          "description": "Text to render as image"
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of rendered placeholder image",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of rendered placeholder image"
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of rendered placeholder image",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of rendered placeholder image"
        },
        {
          "name": "${backgroundColor:backgroundColor}=\"$1\"",
          "description": "Background color",
          "valueSet": "v"
        },
        {
          "name": "backgroundColor",
          "description": "Background color"
        },
        {
          "name": "${textColor:textColor}=\"$1\"",
          "description": "Text color",
          "valueSet": "v"
        },
        {
          "name": "textColor",
          "description": "Text color"
        }
      ]
    },
    {
      "name": "v:format.placeholder.lipsum",
      "description": "Lipsum ViewHelper Renders Lorem Ipsum text according to provided arguments. /",
      "attributes": [
        {
          "name": "${lipsum:lipsum}=\"$1\"",
          "description": "Optional, custom lipsum source",
          "valueSet": "v"
        },
        {
          "name": "lipsum",
          "description": "Optional, custom lipsum source"
        },
        {
          "name": "${paragraphs:paragraphs}=\"$1\"",
          "description": "Number of paragraphs to output",
          "valueSet": "v"
        },
        {
          "name": "paragraphs",
          "description": "Number of paragraphs to output"
        },
        {
          "name": "${wordsPerParagraph:wordsPerParagraph}=\"$1\"",
          "description": "Number of words per paragraph",
          "valueSet": "v"
        },
        {
          "name": "wordsPerParagraph",
          "description": "Number of words per paragraph"
        },
        {
          "name": "${skew:skew}=\"$1\"",
          "description": "Amount in number of words to vary the number of words per paragraph",
          "valueSet": "v"
        },
        {
          "name": "skew",
          "description": "Amount in number of words to vary the number of words per paragraph"
        },
        {
          "name": "${html:html}=\"$1\"",
          "description": "If TRUE, renders output as HTML paragraph tags in the same way an RTE would",
          "valueSet": "v"
        },
        {
          "name": "html",
          "description": "If TRUE, renders output as HTML paragraph tags in the same way an RTE would"
        },
        {
          "name": "${parseFuncTSPath:parseFuncTSPath}=\"$1\"",
          "description": "If you want another parseFunc for HTML processing, enter the TS path here",
          "valueSet": "v"
        },
        {
          "name": "parseFuncTSPath",
          "description": "If you want another parseFunc for HTML processing, enter the TS path here"
        }
      ]
    },
    {
      "name": "v:format.plaintext",
      "description": "Processes output as plaintext. Will trim whitespace off each line that is provided, making display in a <pre> work correctly indented even if the source is not. Expects that you use f:format.htmlentities or similar if you do not want HTML to be displayed as HTML, or simply want it stripped out. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to trim each line of text within",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to trim each line of text within"
        }
      ]
    },
    {
      "name": "v:format.pregReplace",
      "description": "### PregReplace regular expression ViewHelper Implementation of `preg_replace` for Fluid. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "String to match with the regex pattern or patterns",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "String to match with the regex pattern or patterns"
        },
        {
          "name": "${pattern:pattern}=\"$1\"",
          "description": "Regex pattern to match against",
          "valueSet": "v"
        },
        {
          "name": "pattern",
          "description": "Regex pattern to match against"
        },
        {
          "name": "${replacement:replacement}=\"$1\"",
          "description": "String to replace matches with",
          "valueSet": "v"
        },
        {
          "name": "replacement",
          "description": "String to replace matches with"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:format.prepend",
      "description": "### Format: Prepend string content Prepends one string on another. Although this task is very easily done in standard Fluid - i.e. {add}{subject} - this ViewHelper makes advanced chained inline processing possible: {dateTime.timestamp -> v:math.sum(b: 3600) -> v:format.date(format: 'Y-m-d H:i')} <!-- You don't have to break the syntax into lines; done here for display only --> /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "String to prepend other string to",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "String to prepend other string to"
        },
        {
          "name": "${add:add}=\"$1\"",
          "description": "String to prepend",
          "valueSet": "v"
        },
        {
          "name": "add",
          "description": "String to prepend"
        }
      ]
    },
    {
      "name": "v:format.removeXss",
      "description": "Removes XSS from $string Class RemoveXssViewHelper /",
      "attributes": []
    },
    {
      "name": "v:format.replace",
      "description": "Replaces $substring in $content with $replacement. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content in which to perform replacement",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content in which to perform replacement"
        },
        {
          "name": "${substring:substring}=\"$1\"",
          "description": "Substring to replace",
          "valueSet": "v"
        },
        {
          "name": "substring",
          "description": "Substring to replace"
        },
        {
          "name": "${replacement:replacement}=\"$1\"",
          "description": "Replacement to insert",
          "valueSet": "v"
        },
        {
          "name": "replacement",
          "description": "Replacement to insert"
        },
        {
          "name": "${count:count}=\"$1\"",
          "description": "Maximum number of times to perform replacement",
          "valueSet": "v"
        },
        {
          "name": "count",
          "description": "Maximum number of times to perform replacement"
        },
        {
          "name": "${caseSensitive:caseSensitive}=\"$1\"",
          "description": "If true, perform case-sensitive replacement",
          "valueSet": "v"
        },
        {
          "name": "caseSensitive",
          "description": "If true, perform case-sensitive replacement"
        }
      ]
    },
    {
      "name": "v:format.sanitizeString",
      "description": "URL text segment sanitizer. Sanitizes the content into a valid URL segment value which is usable in an URL without further processing. For example, the text \"I am Mr. Brown, how are you?\" becomes \"i-am-mr-brown-how-are-you\". Special characters like diacritics or umlauts are transliterated. The built-in character map can be overriden or extended by providing an associative array of custom mappings. Also useful when creating anchor link names, for example for news entries in your custom EXT:news list template, in which case each news item's title would become an anchor: <a name=\"{newsItem.title -> v:format.url.sanitizeString()}\"></a> And links would look much like the detail view links: /news/#this-is-a-newsitem-title When used with list views it has the added benefit of not breaking if the item referenced is removed, it can be read by Javascript (for example to dynamically expand the news item being referenced). The sanitized urls are also ideal to use for AJAX based detail views - and in almot all cases the sanitized string will be 100% identical to the one used by Realurl when translating using table lookups. /",
      "attributes": [
        {
          "name": "${string:string}=\"$1\"",
          "description": "The string to sanitize.",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "The string to sanitize."
        },
        {
          "name": "${customMap:customMap}=\"$1\"",
          "description": "Associative array of additional characters to replace or use to override built-in mappings.",
          "valueSet": "v"
        },
        {
          "name": "customMap",
          "description": "Associative array of additional characters to replace or use to override built-in mappings."
        }
      ]
    },
    {
      "name": "v:format.substring",
      "description": "Gets a substring from a string or string-compatible value. Also see the `<f:format.crop>` view helper. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content string to substring",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content string to substring"
        },
        {
          "name": "${start:start}=\"$1\"",
          "description": "Positive or negative offset",
          "valueSet": "v"
        },
        {
          "name": "start",
          "description": "Positive or negative offset"
        },
        {
          "name": "${length:length}=\"$1\"",
          "description": "Positive or negative length",
          "valueSet": "v"
        },
        {
          "name": "length",
          "description": "Positive or negative length"
        }
      ]
    },
    {
      "name": "v:format.tidy",
      "description": "Tidy-processes a string (HTML source), applying proper indentation. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to tidy",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to tidy"
        },
        {
          "name": "${encoding:encoding}=\"$1\"",
          "description": "Encoding of string",
          "valueSet": "v"
        },
        {
          "name": "encoding",
          "description": "Encoding of string"
        }
      ]
    },
    {
      "name": "v:format.trim",
      "description": "Trims $content by stripping off $characters (string list of individual chars to strip off, default is all whitespaces). /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "String to trim",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "String to trim"
        },
        {
          "name": "${characters:characters}=\"$1\"",
          "description": "List of characters to trim, no separators, e.g. \"abc123\"",
          "valueSet": "v"
        },
        {
          "name": "characters",
          "description": "List of characters to trim, no separators, e.g. \"abc123\""
        }
      ]
    },
    {
      "name": "v:format.url.decode",
      "description": "Urldecodes the provided string. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to decode from URI",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to decode from URI"
        }
      ]
    },
    {
      "name": "v:format.url.encode",
      "description": "Urlencodes the provided string /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to encode for URI",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to encode for URI"
        }
      ]
    },
    {
      "name": "v:format.url.sanitizeString",
      "description": "Sanitizes a string /",
      "attributes": [
        {
          "name": "${string:string}=\"$1\"",
          "description": "The string to sanitize.",
          "valueSet": "v"
        },
        {
          "name": "string",
          "description": "The string to sanitize."
        },
        {
          "name": "${customMap:customMap}=\"$1\"",
          "description": "Associative array of additional characters to replace or use to override built-in mappings.",
          "valueSet": "v"
        },
        {
          "name": "customMap",
          "description": "Associative array of additional characters to replace or use to override built-in mappings."
        }
      ]
    },
    {
      "name": "v:format.wordWrap",
      "description": "### Wordwrap: Wrap a string at provided character count Wraps a string to $limit characters and at $break character while maintaining complete words. Concatenates the resulting strings with $glue. Code is heavily inspired by Codeigniter's word_wrap helper. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "Text to wrap",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "Text to wrap"
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Maximum length of resulting parts after wrapping",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Maximum length of resulting parts after wrapping"
        },
        {
          "name": "${break:break}=\"$1\"",
          "description": "Character to wrap text at",
          "valueSet": "v"
        },
        {
          "name": "break",
          "description": "Character to wrap text at"
        },
        {
          "name": "${glue:glue}=\"$1\"",
          "description": "Character to concatenate parts with after wrapping",
          "valueSet": "v"
        },
        {
          "name": "glue",
          "description": "Character to concatenate parts with after wrapping"
        }
      ]
    },
    {
      "name": "v:if",
      "description": "If (condition) ViewHelper supporting a stack of conditions instead of a single condition. /",
      "attributes": [
        {
          "name": "${stack:stack}=\"$1\"",
          "description": "The stack to be evaluated",
          "valueSet": "v"
        },
        {
          "name": "stack",
          "description": "The stack to be evaluated"
        }
      ]
    },
    {
      "name": "v:iterator.chunk",
      "description": "Creates chunks from an input Array/Traversable with option to allocate items to a fixed number of chunks /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The subject Traversable/Array instance to shift",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The subject Traversable/Array instance to shift"
        },
        {
          "name": "${count:count}=\"$1\"",
          "description": "Number of items/chunk or if fixed then number of chunks",
          "valueSet": "v"
        },
        {
          "name": "count",
          "description": "Number of items/chunk or if fixed then number of chunks"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${fixed:fixed}=\"$1\"",
          "description": "If true, creates $count chunks instead of $count values per chunk",
          "valueSet": "v"
        },
        {
          "name": "fixed",
          "description": "If true, creates $count chunks instead of $count values per chunk"
        },
        {
          "name": "${preserveKeys:preserveKeys}=\"$1\"",
          "description": "If set to true, the original array keys will be preserved",
          "valueSet": "v"
        },
        {
          "name": "preserveKeys",
          "description": "If set to true, the original array keys will be preserved"
        }
      ]
    },
    {
      "name": "v:iterator.column",
      "description": "### Iterator Column Extraction ViewHelper Implementation of `array_column` for Fluid. Accepts an input iterator/array and creates a new array using values from one column and optionally keys from another column. #### Usage examples ```xml <!-- Given input array of user data arrays with \"name\" and \"uid\" column: --> <f:for each=\"{users -> v:iterator.column(columnKey: 'name', indexKey: 'uid')}\" as=\"username\" key=\"uid\"> User {username} has UID {uid}. </f:for> ``` The above demonstrates the logic of the ViewHelper, but the example itself of course gives the same result as just iterating the `users` variable itself and outputting `{user.username}` etc., but the real power of the ViewHelper comes when using it to feed other ViewHelpers with data sets: ```xml <!-- Given same input array as above. Idea being that *any* iterator can be supported as input for \"options\". --> Select user: <f:form.select options=\"{users -> v:iterator.column(columnKey: 'name', indexKey: 'uid')}\" /> ``` ```xml <!-- Given same input array as above. Idea being to output all user UIDs as CSV --> All UIDs: {users -> v:iterator.column(columnKey: 'uid') -> v:iterator.implode()} ``` ```xml <!-- Given same input array as above. Idea being to output all unique users' countries as a list: --> Our users live in the following countries: {users -> v:iterator.column(columnKey: 'countryName') -> v:iterator.unique() -> v:iterator.implode(glue: ' - ')} ``` Note that the ViewHelper also supports the \"as\" argument which allows you to not return the new array but instead assign it as a new template variable - like any other \"as\"-capable ViewHelper. #### Caveat This ViewHelper passes the subject directly to `array_column` and as such it *does not support dotted paths in either key argument to extract sub-properties*. That means it *does not support Extbase enties as input unless you explicitly implemented `ArrayAccess` on the model of the entity and even then support is limited to first level properties' values without dots in their names*. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "Input to work on - Array/Traversable/...",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "Input to work on - Array/Traversable/..."
        },
        {
          "name": "${columnKey:columnKey}=\"$1\"",
          "description": "Name of the column whose values will become the value of the new array",
          "valueSet": "v"
        },
        {
          "name": "columnKey",
          "description": "Name of the column whose values will become the value of the new array"
        },
        {
          "name": "${indexKey:indexKey}=\"$1\"",
          "description": "Name of the column whose values will become the index of the new array",
          "valueSet": "v"
        },
        {
          "name": "indexKey",
          "description": "Name of the column whose values will become the index of the new array"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.diff",
      "description": "Computes the difference of arrays. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First Array/Traversable/CSV",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First Array/Traversable/CSV"
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second Array/Traversable/CSV",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second Array/Traversable/CSV"
        }
      ]
    },
    {
      "name": "v:iterator.explode",
      "description": "Explode ViewHelper Explodes a string by $glue. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "String to be exploded by glue",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "String to be exploded by glue"
        },
        {
          "name": "${glue:glue}=\"$1\"",
          "description": "String \"glue\" that separates values. If you need a constant (like PHP_EOL), use v:const to read it.",
          "valueSet": "v"
        },
        {
          "name": "glue",
          "description": "String \"glue\" that separates values. If you need a constant (like PHP_EOL), use v:const to read it."
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. If the limit parameter is negative, all components except the last-limit are returned. If the limit parameter is zero, then this is treated as 1.",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. If the limit parameter is negative, all components except the last-limit are returned. If the limit parameter is zero, then this is treated as 1."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.extract",
      "description": "### Iterator / Extract VieWHelper Loop through the iterator and extract a key, optionally join the results if more than one value is found. #### Extract values from an array by key The extbase version of indexed_search returns an array of the previous search, which cannot easily be shown in the input field of the result page. This can be solved. #### Input from extbase version of indexed_search\"> [ 0 => [ 'sword' => 'firstWord', 'oper' => 'AND' ], 1 => [ 'sword' => 'secondWord', 'oper' => 'AND' ], 3 => [ 'sword' => 'thirdWord', 'oper' => 'AND' ] ] Show the previous search words in the search form of the result page: #### Example <f:form.textfield name=\"search[sword]\" value=\"{v:iterator.extract(key:'sword', content: searchWords) -> v:iterator.implode(glue: ' ')}\" class=\"tx-indexedsearch-searchbox-sword\" /> #### Get the names of several users Provided we have a bunch of FrontendUsers and we need to show their firstname combined into a string: <h2>Welcome <v:iterator.implode glue=\", \"><v:iterator.extract key=\"firstname\" content=\"frontendUsers\" /></v:iterator.implode> <!-- alternative: --> {frontendUsers -> v:iterator.extract(key: 'firstname') -> v:iterator.implode(glue: ', ')} </h2> #### Output <h2>Welcome Peter, Paul, Marry</h2> #### Complex example {anArray->v:iterator.extract(path: 'childProperty.secondNestedChildObject') -> v:iterator.sort(direction: 'DESC', sortBy: 'propertyOnSecondChild') -> v:iterator.slice(length: 10)->v:iterator.extract(key: 'uid')} #### Single return value Outputs the \"uid\" value of the first record in variable $someRecords without caring if there are more than one records. Always extracts the first value and then stops. Equivalent of chaning -> v:iterator.first(). {someRecords -> v:iterator.extract(key: 'uid', single: TRUE)} /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "The array or Iterator that contains either the value or arrays of values",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "The array or Iterator that contains either the value or arrays of values"
        },
        {
          "name": "${key:key}=\"$1\"",
          "description": "The name of the key from which you wish to extract the value",
          "valueSet": "v"
        },
        {
          "name": "key",
          "description": "The name of the key from which you wish to extract the value"
        },
        {
          "name": "${recursive:recursive}=\"$1\"",
          "description": "If TRUE, attempts to extract the key from deep nested arrays",
          "valueSet": "v"
        },
        {
          "name": "recursive",
          "description": "If TRUE, attempts to extract the key from deep nested arrays"
        },
        {
          "name": "${single:single}=\"$1\"",
          "description": "If TRUE, returns only one value - always the first one - instead of an array of values",
          "valueSet": "v"
        },
        {
          "name": "single",
          "description": "If TRUE, returns only one value - always the first one - instead of an array of values"
        }
      ]
    },
    {
      "name": "v:iterator.filter",
      "description": "### Iterator: Filter ViewHelper Filters an array by filtering the array, analysing each member and assering if it is equal to (weak type) the `filter` parameter. If `propertyName` is set, the ViewHelper will try to extract this property from each member of the array. Iterators and ObjectStorage etc. are supported. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The subject iterator/array to be filtered",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The subject iterator/array to be filtered"
        },
        {
          "name": "${filter:filter}=\"$1\"",
          "description": "The comparison value",
          "valueSet": "v"
        },
        {
          "name": "filter",
          "description": "The comparison value"
        },
        {
          "name": "${propertyName:propertyName}=\"$1\"",
          "description": "Optional property name to extract and use for comparison instead of the object; use on ObjectStorage etc. Note: supports dot-path expressions",
          "valueSet": "v"
        },
        {
          "name": "propertyName",
          "description": "Optional property name to extract and use for comparison instead of the object; use on ObjectStorage etc. Note: supports dot-path expressions"
        },
        {
          "name": "${preserveKeys:preserveKeys}=\"$1\"",
          "description": "If TRUE, keys in the array are preserved - even if they are numeric",
          "valueSet": "v"
        },
        {
          "name": "preserveKeys",
          "description": "If TRUE, keys in the array are preserved - even if they are numeric"
        },
        {
          "name": "${invert:invert}=\"$1\"",
          "description": "Invert the behavior of the filtering",
          "valueSet": "v"
        },
        {
          "name": "invert",
          "description": "Invert the behavior of the filtering"
        },
        {
          "name": "${nullFilter:nullFilter}=\"$1\"",
          "description": "If TRUE and $filter is NULL (not set) includes only NULL values. Useful with $invert.",
          "valueSet": "v"
        },
        {
          "name": "nullFilter",
          "description": "If TRUE and $filter is NULL (not set) includes only NULL values. Useful with $invert."
        }
      ]
    },
    {
      "name": "v:iterator.first",
      "description": "Returns the first element of $haystack. /",
      "attributes": [
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "Haystack in which to look for needle",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "Haystack in which to look for needle"
        }
      ]
    },
    {
      "name": "v:iterator.for",
      "description": "Repeats rendering of children with a typical for loop: starting at index $from it will loop until the index has reached $to. /",
      "attributes": [
        {
          "name": "${iteration:iteration}=\"$1\"",
          "description": "Variable name to insert result into, suppresses output",
          "valueSet": "v"
        },
        {
          "name": "iteration",
          "description": "Variable name to insert result into, suppresses output"
        },
        {
          "name": "${to:to}=\"$1\"",
          "description": "Number that the index needs to reach before stopping",
          "valueSet": "v"
        },
        {
          "name": "to",
          "description": "Number that the index needs to reach before stopping"
        },
        {
          "name": "${from:from}=\"$1\"",
          "description": "Starting number for the index",
          "valueSet": "v"
        },
        {
          "name": "from",
          "description": "Starting number for the index"
        },
        {
          "name": "${step:step}=\"$1\"",
          "description": "Stepping number that the index is increased by after each loop",
          "valueSet": "v"
        },
        {
          "name": "step",
          "description": "Stepping number that the index is increased by after each loop"
        }
      ]
    },
    {
      "name": "v:iterator.implode",
      "description": "Implode ViewHelper Implodes an array or array-convertible object by $glue. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Array or array-convertible object to be imploded by glue",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Array or array-convertible object to be imploded by glue"
        },
        {
          "name": "${glue:glue}=\"$1\"",
          "description": "String used as glue in the string to be exploded. To use a constant (like PHP_EOL) use v:const to read it.",
          "valueSet": "v"
        },
        {
          "name": "glue",
          "description": "String used as glue in the string to be exploded. To use a constant (like PHP_EOL) use v:const to read it."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.indexOf",
      "description": "Searches $haystack for index of $needle, returns -1 if $needle is not in $haystack. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${needle:needle}=\"$1\"",
          "description": "Needle to search for in haystack",
          "valueSet": "v"
        },
        {
          "name": "needle",
          "description": "Needle to search for in haystack"
        },
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "Haystack in which to look for needle",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "Haystack in which to look for needle"
        },
        {
          "name": "${considerKeys:considerKeys}=\"$1\"",
          "description": "Tell whether to consider keys in the search assuming haystack is an array.",
          "valueSet": "v"
        },
        {
          "name": "considerKeys",
          "description": "Tell whether to consider keys in the search assuming haystack is an array."
        }
      ]
    },
    {
      "name": "v:iterator.intersect",
      "description": "Intersects arrays/Traversables $a and $b into an array. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First Array/Traversable/CSV",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First Array/Traversable/CSV"
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second Array/Traversable/CSV",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second Array/Traversable/CSV"
        }
      ]
    },
    {
      "name": "v:iterator.keys",
      "description": "Gets keys from an iterator. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "Input to work on - Array/Traversable/...",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "Input to work on - Array/Traversable/..."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.last",
      "description": "Returns the last element of $haystack. /",
      "attributes": [
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "Haystack in which to look for needle",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "Haystack in which to look for needle"
        }
      ]
    },
    {
      "name": "v:iterator.loop",
      "description": "Repeats rendering of children $count times while updating $iteration. /",
      "attributes": [
        {
          "name": "${iteration:iteration}=\"$1\"",
          "description": "Variable name to insert result into, suppresses output",
          "valueSet": "v"
        },
        {
          "name": "iteration",
          "description": "Variable name to insert result into, suppresses output"
        },
        {
          "name": "${count:count}=\"$1\"",
          "description": "Number of times to render child content",
          "valueSet": "v"
        },
        {
          "name": "count",
          "description": "Number of times to render child content"
        },
        {
          "name": "${minimum:minimum}=\"$1\"",
          "description": "Minimum number of loops before stopping",
          "valueSet": "v"
        },
        {
          "name": "minimum",
          "description": "Minimum number of loops before stopping"
        },
        {
          "name": "${maximum:maximum}=\"$1\"",
          "description": "Maxiumum number of loops before stopping",
          "valueSet": "v"
        },
        {
          "name": "maximum",
          "description": "Maxiumum number of loops before stopping"
        }
      ]
    },
    {
      "name": "v:iterator.merge",
      "description": "Merges arrays/Traversables $a and $b into an array. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First array/Traversable - if not set, the ViewHelper can be in a chain (inline-notation)",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First array/Traversable - if not set, the ViewHelper can be in a chain (inline-notation)"
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second array or Traversable",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second array or Traversable"
        },
        {
          "name": "${useKeys:useKeys}=\"$1\"",
          "description": "If TRUE comparison is done while also observing and merging the keys used in each array",
          "valueSet": "v"
        },
        {
          "name": "useKeys",
          "description": "If TRUE comparison is done while also observing and merging the keys used in each array"
        }
      ]
    },
    {
      "name": "v:iterator.next",
      "description": "Returns next element in array $haystack from position of $needle. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${needle:needle}=\"$1\"",
          "description": "Needle to search for in haystack",
          "valueSet": "v"
        },
        {
          "name": "needle",
          "description": "Needle to search for in haystack"
        },
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "Haystack in which to look for needle",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "Haystack in which to look for needle"
        },
        {
          "name": "${considerKeys:considerKeys}=\"$1\"",
          "description": "Tell whether to consider keys in the search assuming haystack is an array.",
          "valueSet": "v"
        },
        {
          "name": "considerKeys",
          "description": "Tell whether to consider keys in the search assuming haystack is an array."
        }
      ]
    },
    {
      "name": "v:iterator.pop",
      "description": "Pops the last value off $subject (but does not change $subject itself as array_pop would). /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "Input to work on - Array/Traversable/...",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "Input to work on - Array/Traversable/..."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.previous",
      "description": "Returns previous element in array $haystack from position of $needle. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${needle:needle}=\"$1\"",
          "description": "Needle to search for in haystack",
          "valueSet": "v"
        },
        {
          "name": "needle",
          "description": "Needle to search for in haystack"
        },
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "Haystack in which to look for needle",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "Haystack in which to look for needle"
        },
        {
          "name": "${considerKeys:considerKeys}=\"$1\"",
          "description": "Tell whether to consider keys in the search assuming haystack is an array.",
          "valueSet": "v"
        },
        {
          "name": "considerKeys",
          "description": "Tell whether to consider keys in the search assuming haystack is an array."
        }
      ]
    },
    {
      "name": "v:iterator.push",
      "description": "Adds one variable to the end of the array and returns the result. Example: <f:for each=\"{array -> v:iterator.push(add: additionalObject, key: 'newkey')}\" as=\"combined\"> ... </f:for> /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "Input to work on - Array/Traversable/...",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "Input to work on - Array/Traversable/..."
        },
        {
          "name": "${add:add}=\"$1\"",
          "description": "Member to add to end of array",
          "valueSet": "v"
        },
        {
          "name": "add",
          "description": "Member to add to end of array"
        },
        {
          "name": "${key:key}=\"$1\"",
          "description": "Optional key to use. If key exists the member will be overwritten!",
          "valueSet": "v"
        },
        {
          "name": "key",
          "description": "Optional key to use. If key exists the member will be overwritten!"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.random",
      "description": "Returns random element from array. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The subject Traversable/Array instance from which to select a random element",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The subject Traversable/Array instance from which to select a random element"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.range",
      "description": "### Iterator Range ViewHelper Implementation of `range` for Fluid Creates a new array of numbers from the low to the high given value, incremented by the step value. #### Usage examples ```xml Numbers 1-10: {v:iterator.implode(glue: ',') -> v:iterator.range(low: 1, high: 10)} Even numbers 0-10: {v:iterator.implode(glue: ',') -> v:iterator.range(low: 0, high: 10, step: 2)} ``` /",
      "attributes": [
        {
          "name": "${low:low}=\"$1\"",
          "description": "The low number of the range to be generated",
          "valueSet": "v"
        },
        {
          "name": "low",
          "description": "The low number of the range to be generated"
        },
        {
          "name": "${high:high}=\"$1\"",
          "description": "The high number of the range to be generated",
          "valueSet": "v"
        },
        {
          "name": "high",
          "description": "The high number of the range to be generated"
        },
        {
          "name": "${step:step}=\"$1\"",
          "description": "The step (increment amount) between each number",
          "valueSet": "v"
        },
        {
          "name": "step",
          "description": "The step (increment amount) between each number"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.reverse",
      "description": "### Iterator Reversal ViewHelper Reverses the order of every member of an Iterator/Array, preserving the original keys. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The input array/Traversable to reverse",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The input array/Traversable to reverse"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.shift",
      "description": "Shifts the first value off $subject (but does not change $subject itself as array_shift would). /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The input array/Traversable to shift",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The input array/Traversable to shift"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.slice",
      "description": "Slice an Iterator by $start and $length. /",
      "attributes": [
        {
          "name": "${haystack:haystack}=\"$1\"",
          "description": "The input array/Traversable to reverse",
          "valueSet": "v"
        },
        {
          "name": "haystack",
          "description": "The input array/Traversable to reverse"
        },
        {
          "name": "${start:start}=\"$1\"",
          "description": "Starting offset",
          "valueSet": "v"
        },
        {
          "name": "start",
          "description": "Starting offset"
        },
        {
          "name": "${length:length}=\"$1\"",
          "description": "Number of items to slice",
          "valueSet": "v"
        },
        {
          "name": "length",
          "description": "Number of items to slice"
        },
        {
          "name": "${preserveKeys:preserveKeys}=\"$1\"",
          "description": "Whether or not to preserve original keys",
          "valueSet": "v"
        },
        {
          "name": "preserveKeys",
          "description": "Whether or not to preserve original keys"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.sort",
      "description": "Sorts an instance of ObjectStorage, an Iterator implementation, an Array or a QueryResult (including Lazy counterparts). Can be used inline, i.e.: <f:for each=\"{dataset -> v:iterator.sort(sortBy: 'name')}\" as=\"item\"> // iterating data which is ONLY sorted while rendering this particular loop </f:for> /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The array/Traversable instance to sort",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The array/Traversable instance to sort"
        },
        {
          "name": "${sortBy:sortBy}=\"$1\"",
          "description": "Which property/field to sort by - leave out for numeric sorting based on indexes(keys)",
          "valueSet": "v"
        },
        {
          "name": "sortBy",
          "description": "Which property/field to sort by - leave out for numeric sorting based on indexes(keys)"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "ASC, DESC, RAND or SHUFFLE. RAND preserves keys, SHUFFLE does not - but SHUFFLE is faster",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "ASC, DESC, RAND or SHUFFLE. RAND preserves keys, SHUFFLE does not - but SHUFFLE is faster"
        },
        {
          "name": "${sortFlags:sortFlags}=\"$1\"",
          "description": "Constant name from PHP for `SORT_FLAGS`: `SORT_REGULAR`, `SORT_STRING`, `SORT_NUMERIC`, `SORT_NATURAL`, `SORT_LOCALE_STRING` or `SORT_FLAG_CASE`. You can provide a comma seperated list or array to use a combination of flags.",
          "valueSet": "v"
        },
        {
          "name": "sortFlags",
          "description": "Constant name from PHP for `SORT_FLAGS`: `SORT_REGULAR`, `SORT_STRING`, `SORT_NUMERIC`, `SORT_NATURAL`, `SORT_LOCALE_STRING` or `SORT_FLAG_CASE`. You can provide a comma seperated list or array to use a combination of flags."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.split",
      "description": "Converts a string to an array with $length number of bytes per new array element. Wrapper for PHP's `str_split`. /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The string that will be split into an array",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The string that will be split into an array"
        },
        {
          "name": "${length:length}=\"$1\"",
          "description": "Number of bytes per chunk in the new array",
          "valueSet": "v"
        },
        {
          "name": "length",
          "description": "Number of bytes per chunk in the new array"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.unique",
      "description": "### Iterator Unique Values ViewHelper Implementation of `array_unique` for Fluid Accepts an input array of values and returns/assigns a new array containing only the unique values found in the input array. Note that the ViewHelper does not support the sorting parameter - if you wish to sort the result you should use `v:iterator.sort` in a chain. #### Usage examples ```xml <!-- Given a (large) array of every user's country with possible duplicates. The idea being to output only a unique list of countries' names. --> Countries of our users: {userCountries -> v:iterator.unique() -> v:iterator.implode(glue: ' - ')} ``` Output: ```xml Countries of our users: USA - USA - Denmark - Germany - Germany - USA - Denmark - Germany ``` ```xml <!-- Given the same use case as above but also implementing sorting --> Countries of our users, in alphabetical order: {userCountries -> v:iterator.unique() -> v:iterator.sort(sortFlags: 'SORT_NATURAL') -> v:iterator.implode(glue: ' - ')} ``` Output: ```xml Countries of our users: Denmark - Germany - USA ``` /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The input array/Traversable to process",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The input array/Traversable to process"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:iterator.values",
      "description": "Gets values from an iterator, removing current keys (if any exist). /",
      "attributes": [
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "The array/Traversable instance from which to get values",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "The array/Traversable instance from which to get values"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:l",
      "description": "### L (localisation) ViewHelper An extremely shortened and much more dev-friendly alternative to f:translate. Automatically outputs the name of the LLL reference if it is not found and the default value is not set, making it much easier to identify missing labels when translating. ### Examples <v:l>some.label</v:l> <v:l key=\"some.label\" /> <v:l arguments=\"{0: 'foo', 1: 'bar'}\">some.label</v:l> /",
      "attributes": [
        {
          "name": "${key:key}=\"$1\"",
          "description": "Translation Key",
          "valueSet": "v"
        },
        {
          "name": "key",
          "description": "Translation Key"
        },
        {
          "name": "${default:default}=\"$1\"",
          "description": "if the given locallang key could not be found, this value is used. If this argument is not set, child nodes will be used to render the default",
          "valueSet": "v"
        },
        {
          "name": "default",
          "description": "if the given locallang key could not be found, this value is used. If this argument is not set, child nodes will be used to render the default"
        },
        {
          "name": "${htmlEscape:htmlEscape}=\"$1\"",
          "description": "TRUE if the result should be htmlescaped. This won't have an effect for the default value",
          "valueSet": "v"
        },
        {
          "name": "htmlEscape",
          "description": "TRUE if the result should be htmlescaped. This won't have an effect for the default value"
        },
        {
          "name": "${arguments:arguments}=\"$1\"",
          "description": "Arguments to be replaced in the resulting string",
          "valueSet": "v"
        },
        {
          "name": "arguments",
          "description": "Arguments to be replaced in the resulting string"
        },
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "UpperCamelCased extension key (for example BlogExample)",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "UpperCamelCased extension key (for example BlogExample)"
        }
      ]
    },
    {
      "name": "v:link.typolink",
      "description": "### TypolinkViewhelper Renders a link with the TypoLink function. Can be used with the LinkWizard For more info on the typolink function, please consult the offical core-documentation: http://docs.typo3.org/typo3cms/TyposcriptIn45MinutesTutorial/TypoScriptFunctions/Typolink/Index.html DEPRECATED: Use TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper instead ### Examples <!-- tag --> <v:link.typolink configuration=\"{typoLinkConfiguration}\" /> <v:link.typolink configuration=\"{object}\">My LinkText</v:link.typolink> <!-- with a {parameter} variable containing the PID --> <v:link.typolink configuration=\"{parameter: parameter}\" /> <!-- with a {fields.link} variable from the LinkWizard (incl. 'class', 'target' etc.) inside a flux form --> <v:link.typolink configuration=\"{parameter: fields.link}\" /> <!-- same with a {page} variable from fluidpages --> <v:link.typolink configuration=\"{parameter: page.uid}\" /> <!-- With extensive configuration --> <v:link.typolink configuration=\"{parameter: page.uid, additionalParams: '&print=1', title: 'Follow the link'}\"> Click Me! </v:link.typolink> /",
      "attributes": [
        {
          "name": "${configuration:configuration}=\"$1\"",
          "description": "The typoLink configuration",
          "valueSet": "v"
        },
        {
          "name": "configuration",
          "description": "The typoLink configuration"
        }
      ]
    },
    {
      "name": "v:math.average",
      "description": "Math: Average Performs average across an array. If $a is an array and $b is an array, each member of $a is averaged against the same member in $b. If $a is an array and $b is a number, each member of $a is averaged agained $b. If $a is an array this array is averaged to one number. If $a is a number and $b is not provided or NULL, $a is gracefully returned as an average value of itself. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Optional: Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Optional: Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.ceil",
      "description": "Math: Ceil Ceiling on $a which can be either an array-accessible value (Iterator+ArrayAccess || array) or a raw numeric value. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.cube",
      "description": "Math: Square Performs $a ^ 3. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.cubicRoot",
      "description": "Math: CubicRoot Performs pow($a, 1/3) - cubic or third root. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.division",
      "description": "Math: Division Performs division of $a using $b. A can be an array and $b a number, in which case each member of $a gets divided by $b. If both $a and $b are arrays, each member of $a is summed against the corresponding member in $b compared using index. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.floor",
      "description": "Math: Floor Floors $a which can be either an array-accessible value (Iterator+ArrayAccess || array) or a raw numeric value. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.maximum",
      "description": "Math: Maximum Gets the highest number in array $a or the highest number of numbers $a and $b. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.median",
      "description": "Math: Median Gets the median value from an array of numbers. If there is an odd number of numbers the middle value is returned. If there is an even number of numbers an average of the two middle numbers is returned. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.minimum",
      "description": "Math: Minimum Gets the lowest number in array $a or the lowest number of numbers $a and $b. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.modulo",
      "description": "Math: Modulo Perform modulo on $input. Returns the same type as $input, i.e. if given an array, will transform each member and return the result. Supports array and Iterator (in the following descriptions \"array\" means both these types): If $a and $b are both arrays of the same size then modulo is performed on $a using members of $b, by their index (so these must match in both arrays). If $a is an array and $b is a number then modulo is performed on $a using $b for each calculation. If $a and $b are both numbers simple modulo is performed. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.power",
      "description": "Math: Power Performs pow($a, $b) where $a is the base and $b is the exponent. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.product",
      "description": "### Math: Product (multiplication) Product (multiplication) of $a and $b. A can be an array and $b a number, in which case each member of $a gets multiplied by $b. If $a is an array and $b is not provided then array_product is used to return a single numeric value. If both $a and $b are arrays, each member of $a is multiplied against the corresponding member in $b compared using index. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.range",
      "description": "Math: Range Gets the lowest and highest number from an array of numbers. Returns an array of [low, high]. For individual low/high values please use v:math.maximum and v:math.minimum. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.round",
      "description": "Math: Round Rounds off $a which can be either an array-accessible value (Iterator+ArrayAccess || array) or a raw numeric value. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${decimals:decimals}=\"$1\"",
          "description": "Number of decimals",
          "valueSet": "v"
        },
        {
          "name": "decimals",
          "description": "Number of decimals"
        }
      ]
    },
    {
      "name": "v:math.squareRoot",
      "description": "Math: SquareRoot Performs sqrt($a). /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.square",
      "description": "Math: Square Performs $a ^ 2. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        }
      ]
    },
    {
      "name": "v:math.subtract",
      "description": "Math: Subtract Performs subtraction of $a and $b. A can be an array and $b a number, in which case each member of $a gets subtracted $b. If $a is an array and $b is not provided then neg. array_sum is used to return a single numeric value. If both $a and $b are arrays, each member of $a is summed against the corresponding member in $b compared using index. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Optional: Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Optional: Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:math.sum",
      "description": "Math: Sum Performs sum of $a and $b. A can be an array and $b a number, in which case each member of $a gets summed with $b. If $a is an array and $b is not provided then array_sum is used to return a single numeric value. If both $a and $b are arrays, each member of $a is summed against the corresponding member in $b compared using index. /",
      "attributes": [
        {
          "name": "${a:a}=\"$1\"",
          "description": "First number for calculation",
          "valueSet": "v"
        },
        {
          "name": "a",
          "description": "First number for calculation"
        },
        {
          "name": "${fail:fail}=\"$1\"",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).",
          "valueSet": "v"
        },
        {
          "name": "fail",
          "description": "If TRUE, throws an Exception if argument \"a\" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero)."
        },
        {
          "name": "${b:b}=\"$1\"",
          "description": "Optional: Second number or Iterator/Traversable/Array for calculation",
          "valueSet": "v"
        },
        {
          "name": "b",
          "description": "Optional: Second number or Iterator/Traversable/Array for calculation"
        }
      ]
    },
    {
      "name": "v:media.audio",
      "description": "Renders HTML code to embed a HTML5 audio player. NOTICE: This is all HTML5 and won't work on browsers like IE8 and below. Include some helper library like kolber.github.io/audiojs/ if you need to suport those. Source can be a single file, a CSV of files or an array of arrays with multiple sources for different audio formats. In the latter case provide array keys 'src' and 'type'. Providing an array of sources (even for a single source) is preferred as you can set the correct mime type of the audio which is otherwise guessed from the filename's extension. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Sets the width of the audio player in pixels.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Sets the width of the audio player in pixels."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Sets the height of the audio player in pixels.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Sets the height of the audio player in pixels."
        },
        {
          "name": "${autoplay:autoplay}=\"$1\"",
          "description": "Specifies that the audio will start playing as soon as it is ready.",
          "valueSet": "v"
        },
        {
          "name": "autoplay",
          "description": "Specifies that the audio will start playing as soon as it is ready."
        },
        {
          "name": "${controls:controls}=\"$1\"",
          "description": "Specifies that audio controls should be displayed (such as a play/pause button etc).",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "Specifies that audio controls should be displayed (such as a play/pause button etc)."
        },
        {
          "name": "${loop:loop}=\"$1\"",
          "description": "Specifies that the audio will start over again, every time it is finished.",
          "valueSet": "v"
        },
        {
          "name": "loop",
          "description": "Specifies that the audio will start over again, every time it is finished."
        },
        {
          "name": "${muted:muted}=\"$1\"",
          "description": "Specifies that the audio output of the audio should be muted.",
          "valueSet": "v"
        },
        {
          "name": "muted",
          "description": "Specifies that the audio output of the audio should be muted."
        },
        {
          "name": "${poster:poster}=\"$1\"",
          "description": "Specifies an image to be shown while the audio is downloading, or until the user hits the play button.",
          "valueSet": "v"
        },
        {
          "name": "poster",
          "description": "Specifies an image to be shown while the audio is downloading, or until the user hits the play button."
        },
        {
          "name": "${preload:preload}=\"$1\"",
          "description": "Specifies if and how the author thinks the audio should be loaded when the page loads. Can be \"auto\", \"metadata\" or \"none\".",
          "valueSet": "v"
        },
        {
          "name": "preload",
          "description": "Specifies if and how the author thinks the audio should be loaded when the page loads. Can be \"auto\", \"metadata\" or \"none\"."
        },
        {
          "name": "${unsupported:unsupported}=\"$1\"",
          "description": "Add a message for old browsers like Internet Explorer 9 without audio support.",
          "valueSet": "v"
        },
        {
          "name": "unsupported",
          "description": "Add a message for old browsers like Internet Explorer 9 without audio support."
        }
      ]
    },
    {
      "name": "v:media.exists",
      "description": "File/Directory Exists Condition ViewHelper. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${file:file}=\"$1\"",
          "description": "Filename which must exist to trigger f:then rendering",
          "valueSet": "v"
        },
        {
          "name": "file",
          "description": "Filename which must exist to trigger f:then rendering"
        },
        {
          "name": "${directory:directory}=\"$1\"",
          "description": "Directory which must exist to trigger f:then rendering",
          "valueSet": "v"
        },
        {
          "name": "directory",
          "description": "Directory which must exist to trigger f:then rendering"
        }
      ]
    },
    {
      "name": "v:media.extension",
      "description": "Returns the extension of the provided file. /",
      "attributes": [
        {
          "name": "${file:file}=\"$1\"",
          "description": "Path to the file to determine extension for.",
          "valueSet": "v"
        },
        {
          "name": "file",
          "description": "Path to the file to determine extension for."
        }
      ]
    },
    {
      "name": "v:media.files",
      "description": "Returns an array of files found in the provided path. /",
      "attributes": [
        {
          "name": "${path:path}=\"$1\"",
          "description": "Path to the folder containing the files to be listed.",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Path to the folder containing the files to be listed."
        },
        {
          "name": "${extensionList:extensionList}=\"$1\"",
          "description": "A comma seperated list of file extensions to pick up.",
          "valueSet": "v"
        },
        {
          "name": "extensionList",
          "description": "A comma seperated list of file extensions to pick up."
        },
        {
          "name": "${prependPath:prependPath}=\"$1\"",
          "description": "If set to TRUE the path will be prepended to file names.",
          "valueSet": "v"
        },
        {
          "name": "prependPath",
          "description": "If set to TRUE the path will be prepended to file names."
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "If set to \"mtime\" sorts files by modification time or alphabetically otherwise.",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "If set to \"mtime\" sorts files by modification time or alphabetically otherwise."
        },
        {
          "name": "${excludePattern:excludePattern}=\"$1\"",
          "description": "A comma seperated list of filenames to exclude, no wildcards.",
          "valueSet": "v"
        },
        {
          "name": "excludePattern",
          "description": "A comma seperated list of filenames to exclude, no wildcards."
        }
      ]
    },
    {
      "name": "v:media.gravatar",
      "description": "Renders Gravatar <img/> tag. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${email:email}=\"$1\"",
          "description": "Email address",
          "valueSet": "v"
        },
        {
          "name": "email",
          "description": "Email address"
        },
        {
          "name": "${size:size}=\"$1\"",
          "description": "Size in pixels, defaults to 80px [ 1 - 2048 ]",
          "valueSet": "v"
        },
        {
          "name": "size",
          "description": "Size in pixels, defaults to 80px [ 1 - 2048 ]"
        },
        {
          "name": "${imageSet:imageSet}=\"$1\"",
          "description": "Default image set to use. Possible values [ 404 | mm | identicon | monsterid | wavatar ] ",
          "valueSet": "v"
        },
        {
          "name": "imageSet",
          "description": "Default image set to use. Possible values [ 404 | mm | identicon | monsterid | wavatar ] "
        },
        {
          "name": "${maximumRating:maximumRating}=\"$1\"",
          "description": "Maximum rating (inclusive) [ g | pg | r | x ]",
          "valueSet": "v"
        },
        {
          "name": "maximumRating",
          "description": "Maximum rating (inclusive) [ g | pg | r | x ]"
        },
        {
          "name": "${secure:secure}=\"$1\"",
          "description": "If it is FALSE will return the un secure Gravatar domain (www.gravatar.com)",
          "valueSet": "v"
        },
        {
          "name": "secure",
          "description": "If it is FALSE will return the un secure Gravatar domain (www.gravatar.com)"
        }
      ]
    },
    {
      "name": "v:media.image",
      "description": "Renders an image tag for the given resource including all valid HTML5 attributes. Derivates of the original image are rendered if the provided (optional) dimensions differ. ## rendering responsive Images variants You can use the srcset argument to generate several differently sized versions of this image that will be added as a srcset argument to the img tag. enter a list of widths in the srcset to genereate copies of the same crop + ratio but in the specified widths. Put the width at the start that you want to use as a fallback to be shown when no srcset functionality is supported. ### Example <v:media.image src=\"fileadmin/some-image.png\" srcset=\"480,768,992,1200\" /> ### Browser Support To have the widest Browser-Support you should consider using a polyfill like: http://scottjehl.github.io/picturefill/ /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${maxW:maxW}=\"$1\"",
          "description": "Maximum Width of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxW",
          "description": "Maximum Width of the image. (no upscaling)"
        },
        {
          "name": "${maxH:maxH}=\"$1\"",
          "description": "Maximum Height of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxH",
          "description": "Maximum Height of the image. (no upscaling)"
        },
        {
          "name": "${minW:minW}=\"$1\"",
          "description": "Minimum Width of the image.",
          "valueSet": "v"
        },
        {
          "name": "minW",
          "description": "Minimum Width of the image."
        },
        {
          "name": "${minH:minH}=\"$1\"",
          "description": "Minimum Height of the image.",
          "valueSet": "v"
        },
        {
          "name": "minH",
          "description": "Minimum Height of the image."
        },
        {
          "name": "${format:format}=\"$1\"",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.",
          "valueSet": "v"
        },
        {
          "name": "format",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account."
        },
        {
          "name": "${quality:quality}=\"$1\"",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.",
          "valueSet": "v"
        },
        {
          "name": "quality",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above."
        },
        {
          "name": "${canvasWidth:canvasWidth}=\"$1\"",
          "description": "Width of an optional canvas to place the image on.",
          "valueSet": "v"
        },
        {
          "name": "canvasWidth",
          "description": "Width of an optional canvas to place the image on."
        },
        {
          "name": "${canvasHeight:canvasHeight}=\"$1\"",
          "description": "Height of an optional canvas to place the image on.",
          "valueSet": "v"
        },
        {
          "name": "canvasHeight",
          "description": "Height of an optional canvas to place the image on."
        },
        {
          "name": "${canvasColor:canvasColor}=\"$1\"",
          "description": "Background color of an optional canvas to place the image on (hex triplet).",
          "valueSet": "v"
        },
        {
          "name": "canvasColor",
          "description": "Background color of an optional canvas to place the image on (hex triplet)."
        },
        {
          "name": "${transparencyColor:transparencyColor}=\"$1\"",
          "description": "Color to set transparent when using canvas feature (hex triplet).",
          "valueSet": "v"
        },
        {
          "name": "transparencyColor",
          "description": "Color to set transparent when using canvas feature (hex triplet)."
        },
        {
          "name": "${crop:crop}=\"$1\"",
          "description": "Information generated by the backend's graphical cropping UI",
          "valueSet": "v"
        },
        {
          "name": "crop",
          "description": "Information generated by the backend's graphical cropping UI"
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${usemap:usemap}=\"$1\"",
          "description": "A hash-name reference to a map element with which to associate the image.",
          "valueSet": "v"
        },
        {
          "name": "usemap",
          "description": "A hash-name reference to a map element with which to associate the image."
        },
        {
          "name": "${ismap:ismap}=\"$1\"",
          "description": "Specifies that its img element provides access to a server-side image map.",
          "valueSet": "v"
        },
        {
          "name": "ismap",
          "description": "Specifies that its img element provides access to a server-side image map."
        },
        {
          "name": "${alt:alt}=\"$1\"",
          "description": "Equivalent content for those who cannot process images or who have image loading disabled.",
          "valueSet": "v"
        },
        {
          "name": "alt",
          "description": "Equivalent content for those who cannot process images or who have image loading disabled."
        },
        {
          "name": "${srcset:srcset}=\"$1\"",
          "description": "List of width used for the srcset variants (either CSV, array or implementing Traversable)",
          "valueSet": "v"
        },
        {
          "name": "srcset",
          "description": "List of width used for the srcset variants (either CSV, array or implementing Traversable)"
        },
        {
          "name": "${srcsetDefault:srcsetDefault}=\"$1\"",
          "description": "Default width to use as a fallback for browsers that don't support srcset",
          "valueSet": "v"
        },
        {
          "name": "srcsetDefault",
          "description": "Default width to use as a fallback for browsers that don't support srcset"
        }
      ]
    },
    {
      "name": "v:media.image.height",
      "description": "Returns the height of the provided image file in pixels. /",
      "attributes": [
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to or id of the image file to determine info for. In case a FileReference is supplied, treatIdAsUid and treatIdAsReference will automatically be activated.",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to or id of the image file to determine info for. In case a FileReference is supplied, treatIdAsUid and treatIdAsReference will automatically be activated."
        },
        {
          "name": "${treatIdAsUid:treatIdAsUid}=\"$1\"",
          "description": "If TRUE, the path argument is treated as a resource uid.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsUid",
          "description": "If TRUE, the path argument is treated as a resource uid."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference."
        }
      ]
    },
    {
      "name": "v:media.image.mimetype",
      "description": "Returns the mimetype of the provided image file. /",
      "attributes": [
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to or id of the image file to determine info for. In case a FileReference is supplied, treatIdAsUid and treatIdAsReference will automatically be activated.",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to or id of the image file to determine info for. In case a FileReference is supplied, treatIdAsUid and treatIdAsReference will automatically be activated."
        },
        {
          "name": "${treatIdAsUid:treatIdAsUid}=\"$1\"",
          "description": "If TRUE, the path argument is treated as a resource uid.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsUid",
          "description": "If TRUE, the path argument is treated as a resource uid."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference."
        }
      ]
    },
    {
      "name": "v:media.image.width",
      "description": "Returns the width of the provided image file in pixels. /",
      "attributes": [
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to or id of the image file to determine info for. In case a FileReference is supplied, treatIdAsUid and treatIdAsReference will automatically be activated.",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to or id of the image file to determine info for. In case a FileReference is supplied, treatIdAsUid and treatIdAsReference will automatically be activated."
        },
        {
          "name": "${treatIdAsUid:treatIdAsUid}=\"$1\"",
          "description": "If TRUE, the path argument is treated as a resource uid.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsUid",
          "description": "If TRUE, the path argument is treated as a resource uid."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference."
        }
      ]
    },
    {
      "name": "v:media.pdfThumbnail",
      "description": "Converts the provided PDF file into a PNG thumbnail and renders the according image tag using Fluid's standard image ViewHelper thus implementing its arguments. For PDF documents with multiple pages the first page is rendered by default unless specified. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${maxW:maxW}=\"$1\"",
          "description": "Maximum Width of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxW",
          "description": "Maximum Width of the image. (no upscaling)"
        },
        {
          "name": "${maxH:maxH}=\"$1\"",
          "description": "Maximum Height of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxH",
          "description": "Maximum Height of the image. (no upscaling)"
        },
        {
          "name": "${minW:minW}=\"$1\"",
          "description": "Minimum Width of the image.",
          "valueSet": "v"
        },
        {
          "name": "minW",
          "description": "Minimum Width of the image."
        },
        {
          "name": "${minH:minH}=\"$1\"",
          "description": "Minimum Height of the image.",
          "valueSet": "v"
        },
        {
          "name": "minH",
          "description": "Minimum Height of the image."
        },
        {
          "name": "${format:format}=\"$1\"",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.",
          "valueSet": "v"
        },
        {
          "name": "format",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account."
        },
        {
          "name": "${quality:quality}=\"$1\"",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.",
          "valueSet": "v"
        },
        {
          "name": "quality",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above."
        },
        {
          "name": "${canvasWidth:canvasWidth}=\"$1\"",
          "description": "Width of an optional canvas to place the image on.",
          "valueSet": "v"
        },
        {
          "name": "canvasWidth",
          "description": "Width of an optional canvas to place the image on."
        },
        {
          "name": "${canvasHeight:canvasHeight}=\"$1\"",
          "description": "Height of an optional canvas to place the image on.",
          "valueSet": "v"
        },
        {
          "name": "canvasHeight",
          "description": "Height of an optional canvas to place the image on."
        },
        {
          "name": "${canvasColor:canvasColor}=\"$1\"",
          "description": "Background color of an optional canvas to place the image on (hex triplet).",
          "valueSet": "v"
        },
        {
          "name": "canvasColor",
          "description": "Background color of an optional canvas to place the image on (hex triplet)."
        },
        {
          "name": "${transparencyColor:transparencyColor}=\"$1\"",
          "description": "Color to set transparent when using canvas feature (hex triplet).",
          "valueSet": "v"
        },
        {
          "name": "transparencyColor",
          "description": "Color to set transparent when using canvas feature (hex triplet)."
        },
        {
          "name": "${crop:crop}=\"$1\"",
          "description": "Information generated by the backend's graphical cropping UI",
          "valueSet": "v"
        },
        {
          "name": "crop",
          "description": "Information generated by the backend's graphical cropping UI"
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${usemap:usemap}=\"$1\"",
          "description": "A hash-name reference to a map element with which to associate the image.",
          "valueSet": "v"
        },
        {
          "name": "usemap",
          "description": "A hash-name reference to a map element with which to associate the image."
        },
        {
          "name": "${ismap:ismap}=\"$1\"",
          "description": "Specifies that its img element provides access to a server-side image map.",
          "valueSet": "v"
        },
        {
          "name": "ismap",
          "description": "Specifies that its img element provides access to a server-side image map."
        },
        {
          "name": "${alt:alt}=\"$1\"",
          "description": "Equivalent content for those who cannot process images or who have image loading disabled.",
          "valueSet": "v"
        },
        {
          "name": "alt",
          "description": "Equivalent content for those who cannot process images or who have image loading disabled."
        },
        {
          "name": "${srcset:srcset}=\"$1\"",
          "description": "List of width used for the srcset variants (either CSV, array or implementing Traversable)",
          "valueSet": "v"
        },
        {
          "name": "srcset",
          "description": "List of width used for the srcset variants (either CSV, array or implementing Traversable)"
        },
        {
          "name": "${srcsetDefault:srcsetDefault}=\"$1\"",
          "description": "Default width to use as a fallback for browsers that don't support srcset",
          "valueSet": "v"
        },
        {
          "name": "srcsetDefault",
          "description": "Default width to use as a fallback for browsers that don't support srcset"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "DEPRECATED: Use src instead",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "DEPRECATED: Use src instead"
        },
        {
          "name": "${minWidth:minWidth}=\"$1\"",
          "description": "DEPRECATED: Use minW instead",
          "valueSet": "v"
        },
        {
          "name": "minWidth",
          "description": "DEPRECATED: Use minW instead"
        },
        {
          "name": "${minHeight:minHeight}=\"$1\"",
          "description": "DEPRECATED: Use minH instead",
          "valueSet": "v"
        },
        {
          "name": "minHeight",
          "description": "DEPRECATED: Use minH instead"
        },
        {
          "name": "${maxWidth:maxWidth}=\"$1\"",
          "description": "DEPRECATED: Use maxW instead",
          "valueSet": "v"
        },
        {
          "name": "maxWidth",
          "description": "DEPRECATED: Use maxW instead"
        },
        {
          "name": "${maxHeight:maxHeight}=\"$1\"",
          "description": "DEPRECATED: Use maxH instead",
          "valueSet": "v"
        },
        {
          "name": "maxHeight",
          "description": "DEPRECATED: Use maxH instead"
        },
        {
          "name": "${density:density}=\"$1\"",
          "description": "Canvas resolution for rendering the PDF in dpi (higher means better quality)",
          "valueSet": "v"
        },
        {
          "name": "density",
          "description": "Canvas resolution for rendering the PDF in dpi (higher means better quality)"
        },
        {
          "name": "${background:background}=\"$1\"",
          "description": "Fill background of resulting image with this color (for transparent source files)",
          "valueSet": "v"
        },
        {
          "name": "background",
          "description": "Fill background of resulting image with this color (for transparent source files)"
        },
        {
          "name": "${rotate:rotate}=\"$1\"",
          "description": "Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)",
          "valueSet": "v"
        },
        {
          "name": "rotate",
          "description": "Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)"
        },
        {
          "name": "${page:page}=\"$1\"",
          "description": "Optional page number to render as thumbnail for PDF documents with multiple pages",
          "valueSet": "v"
        },
        {
          "name": "page",
          "description": "Optional page number to render as thumbnail for PDF documents with multiple pages"
        },
        {
          "name": "${forceOverwrite:forceOverwrite}=\"$1\"",
          "description": "Forcibly overwrite existing converted PDF files",
          "valueSet": "v"
        },
        {
          "name": "forceOverwrite",
          "description": "Forcibly overwrite existing converted PDF files"
        }
      ]
    },
    {
      "name": "v:media.picture",
      "description": "Renders a picture element with different images/sources for specific media breakpoints ### Example <v:media.picture src=\"fileadmin/some-image.png\" alt=\"Some Image\"> <v:media.source media=\"(min-width: 1200px)\" width=\"500c\" height=\"500c\" /> <v:media.source media=\"(min-width: 992px)\" width=\"300c\" height=\"300c\" /> <v:media.source media=\"(min-width: 768px)\" width=\"200c\" height=\"200c\" /> <v:media.source width=\"80c\" height=\"80c\" /> </v:media.picture> ### Browser Support To have the widest Browser-Support you should consider using a polyfill like: http://scottjehl.github.io/picturefill/ /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to the image or FileReference.",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to the image or FileReference."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "When TRUE treat given src argument as sys_file_reference record.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "When TRUE treat given src argument as sys_file_reference record."
        },
        {
          "name": "${alt:alt}=\"$1\"",
          "description": "Text for the alt attribute.",
          "valueSet": "v"
        },
        {
          "name": "alt",
          "description": "Text for the alt attribute."
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Text for the title attribute.",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Text for the title attribute."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) to set.",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) to set."
        }
      ]
    },
    {
      "name": "v:media.size",
      "description": "Returns the size of the provided file in bytes. /",
      "attributes": [
        {
          "name": "${path:path}=\"$1\"",
          "description": "Path to the file to determine size for.",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Path to the file to determine size for."
        }
      ]
    },
    {
      "name": "v:media.source",
      "description": "Used in conjuntion with the `v:media.PictureViewHelper`. Please take a look at the `v:media.PictureViewHelper` documentation for more information. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${media:media}=\"$1\"",
          "description": "Media query for which breakpoint this sources applies",
          "valueSet": "v"
        },
        {
          "name": "media",
          "description": "Media query for which breakpoint this sources applies"
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${maxW:maxW}=\"$1\"",
          "description": "Maximum Width of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxW",
          "description": "Maximum Width of the image. (no upscaling)"
        },
        {
          "name": "${maxH:maxH}=\"$1\"",
          "description": "Maximum Height of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxH",
          "description": "Maximum Height of the image. (no upscaling)"
        },
        {
          "name": "${minW:minW}=\"$1\"",
          "description": "Minimum Width of the image.",
          "valueSet": "v"
        },
        {
          "name": "minW",
          "description": "Minimum Width of the image."
        },
        {
          "name": "${minH:minH}=\"$1\"",
          "description": "Minimum Height of the image.",
          "valueSet": "v"
        },
        {
          "name": "minH",
          "description": "Minimum Height of the image."
        },
        {
          "name": "${format:format}=\"$1\"",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.",
          "valueSet": "v"
        },
        {
          "name": "format",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account."
        },
        {
          "name": "${quality:quality}=\"$1\"",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.",
          "valueSet": "v"
        },
        {
          "name": "quality",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "Produce a relative URL instead of absolute",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "Produce a relative URL instead of absolute"
        }
      ]
    },
    {
      "name": "v:media.spotify",
      "description": "Renders HTML code to embed a Spotify play button. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${spotifyUri:spotifyUri}=\"$1\"",
          "description": "Spotify URI to create the play button for. Right click any song, album or playlist in Spotify and select Copy Spotify URI.",
          "valueSet": "v"
        },
        {
          "name": "spotifyUri",
          "description": "Spotify URI to create the play button for. Right click any song, album or playlist in Spotify and select Copy Spotify URI."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the play button in pixels. Defaults to 300",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the play button in pixels. Defaults to 300"
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the play button in pixels. Defaults to 380",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the play button in pixels. Defaults to 380"
        },
        {
          "name": "${compact:compact}=\"$1\"",
          "description": "Whether to render the compact button with a fixed height of 80px.",
          "valueSet": "v"
        },
        {
          "name": "compact",
          "description": "Whether to render the compact button with a fixed height of 80px."
        },
        {
          "name": "${theme:theme}=\"$1\"",
          "description": "Theme to use. Can be \"black\" or \"white\" and is not available in compact mode. Defaults to \"black\".",
          "valueSet": "v"
        },
        {
          "name": "theme",
          "description": "Theme to use. Can be \"black\" or \"white\" and is not available in compact mode. Defaults to \"black\"."
        },
        {
          "name": "${view:view}=\"$1\"",
          "description": "View to use. Can be \"list\" or \"coverart\" and is not available in compact mode. Defaults to \"list\".",
          "valueSet": "v"
        },
        {
          "name": "view",
          "description": "View to use. Can be \"list\" or \"coverart\" and is not available in compact mode. Defaults to \"list\"."
        }
      ]
    },
    {
      "name": "v:media.video",
      "description": "Renders HTML code to embed a HTML5 video player. NOTICE: This is all HTML5 and won't work on browsers like IE8 and below. Include some helper library like videojs.com if you need to suport those. Source can be a single file, a CSV of files or an array of arrays with multiple sources for different video formats. In the latter case provide array keys 'src' and 'type'. Providing an array of sources (even for a single source) is preferred as you can set the correct mime type of the video which is otherwise guessed from the filename's extension. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Sets the width of the video player in pixels.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Sets the width of the video player in pixels."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Sets the height of the video player in pixels.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Sets the height of the video player in pixels."
        },
        {
          "name": "${autoplay:autoplay}=\"$1\"",
          "description": "Specifies that the video will start playing as soon as it is ready.",
          "valueSet": "v"
        },
        {
          "name": "autoplay",
          "description": "Specifies that the video will start playing as soon as it is ready."
        },
        {
          "name": "${controls:controls}=\"$1\"",
          "description": "Specifies that video controls should be displayed (such as a play/pause button etc).",
          "valueSet": "v"
        },
        {
          "name": "controls",
          "description": "Specifies that video controls should be displayed (such as a play/pause button etc)."
        },
        {
          "name": "${loop:loop}=\"$1\"",
          "description": "Specifies that the video will start over again, every time it is finished.",
          "valueSet": "v"
        },
        {
          "name": "loop",
          "description": "Specifies that the video will start over again, every time it is finished."
        },
        {
          "name": "${muted:muted}=\"$1\"",
          "description": "Specifies that the audio output of the video should be muted.",
          "valueSet": "v"
        },
        {
          "name": "muted",
          "description": "Specifies that the audio output of the video should be muted."
        },
        {
          "name": "${poster:poster}=\"$1\"",
          "description": "Specifies an image to be shown while the video is downloading, or until the user hits the play button.",
          "valueSet": "v"
        },
        {
          "name": "poster",
          "description": "Specifies an image to be shown while the video is downloading, or until the user hits the play button."
        },
        {
          "name": "${preload:preload}=\"$1\"",
          "description": "Specifies if and how the author thinks the video should be loaded when the page loads. Can be \"auto\", \"metadata\" or \"none\".",
          "valueSet": "v"
        },
        {
          "name": "preload",
          "description": "Specifies if and how the author thinks the video should be loaded when the page loads. Can be \"auto\", \"metadata\" or \"none\"."
        },
        {
          "name": "${unsupported:unsupported}=\"$1\"",
          "description": "Add a message for old browsers like Internet Explorer 9 without video support.",
          "valueSet": "v"
        },
        {
          "name": "unsupported",
          "description": "Add a message for old browsers like Internet Explorer 9 without video support."
        }
      ]
    },
    {
      "name": "v:media.vimeo",
      "description": "Renders HTML code to embed a video from Vimeo. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Show the title on the video. Defaults to TRUE.",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Show the title on the video. Defaults to TRUE."
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${videoId:videoId}=\"$1\"",
          "description": "Vimeo ID of the video to embed.",
          "valueSet": "v"
        },
        {
          "name": "videoId",
          "description": "Vimeo ID of the video to embed."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the video in pixels. Defaults to 640 for 16:9 content.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the video in pixels. Defaults to 640 for 16:9 content."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the video in pixels. Defaults to 360 for 16:9 content.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the video in pixels. Defaults to 360 for 16:9 content."
        },
        {
          "name": "${byline:byline}=\"$1\"",
          "description": "Show the users byline on the video. Defaults to TRUE.",
          "valueSet": "v"
        },
        {
          "name": "byline",
          "description": "Show the users byline on the video. Defaults to TRUE."
        },
        {
          "name": "${portrait:portrait}=\"$1\"",
          "description": "Show the users portrait on the video. Defaults to TRUE.",
          "valueSet": "v"
        },
        {
          "name": "portrait",
          "description": "Show the users portrait on the video. Defaults to TRUE."
        },
        {
          "name": "${color:color}=\"$1\"",
          "description": "Specify the color of the video controls. Defaults to 00adef. Make sure that you dont include the #.",
          "valueSet": "v"
        },
        {
          "name": "color",
          "description": "Specify the color of the video controls. Defaults to 00adef. Make sure that you dont include the #."
        },
        {
          "name": "${autoplay:autoplay}=\"$1\"",
          "description": "Play the video automatically on load. Defaults to FALSE. Note that this wont work on some devices.",
          "valueSet": "v"
        },
        {
          "name": "autoplay",
          "description": "Play the video automatically on load. Defaults to FALSE. Note that this wont work on some devices."
        },
        {
          "name": "${loop:loop}=\"$1\"",
          "description": "Play the video again when it reaches the end. Defaults to FALSE.",
          "valueSet": "v"
        },
        {
          "name": "loop",
          "description": "Play the video again when it reaches the end. Defaults to FALSE."
        },
        {
          "name": "${api:api}=\"$1\"",
          "description": "Set to TRUE to enable the Javascript API.",
          "valueSet": "v"
        },
        {
          "name": "api",
          "description": "Set to TRUE to enable the Javascript API."
        },
        {
          "name": "${playerId:playerId}=\"$1\"",
          "description": "An unique id for the player that will be passed back with all Javascript API responses.",
          "valueSet": "v"
        },
        {
          "name": "playerId",
          "description": "An unique id for the player that will be passed back with all Javascript API responses."
        }
      ]
    },
    {
      "name": "v:media.youtube",
      "description": "Renders HTML code to embed a video from YouTube. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${videoId:videoId}=\"$1\"",
          "description": "YouTube id of the video to embed.",
          "valueSet": "v"
        },
        {
          "name": "videoId",
          "description": "YouTube id of the video to embed."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the video in pixels. Defaults to 640 for 16:9 content.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the video in pixels. Defaults to 640 for 16:9 content."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the video in pixels. Defaults to 385 for 16:9 content.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the video in pixels. Defaults to 385 for 16:9 content."
        },
        {
          "name": "${autoplay:autoplay}=\"$1\"",
          "description": "Play the video automatically on load. Defaults to FALSE.",
          "valueSet": "v"
        },
        {
          "name": "autoplay",
          "description": "Play the video automatically on load. Defaults to FALSE."
        },
        {
          "name": "${legacyCode:legacyCode}=\"$1\"",
          "description": "Whether to use the legacy flash video code.",
          "valueSet": "v"
        },
        {
          "name": "legacyCode",
          "description": "Whether to use the legacy flash video code."
        },
        {
          "name": "${showRelated:showRelated}=\"$1\"",
          "description": "Whether to show related videos after playing.",
          "valueSet": "v"
        },
        {
          "name": "showRelated",
          "description": "Whether to show related videos after playing."
        },
        {
          "name": "${extendedPrivacy:extendedPrivacy}=\"$1\"",
          "description": "Whether to use cookie-less video player.",
          "valueSet": "v"
        },
        {
          "name": "extendedPrivacy",
          "description": "Whether to use cookie-less video player."
        },
        {
          "name": "${hideControl:hideControl}=\"$1\"",
          "description": "Hide video player's control bar.",
          "valueSet": "v"
        },
        {
          "name": "hideControl",
          "description": "Hide video player's control bar."
        },
        {
          "name": "${hideInfo:hideInfo}=\"$1\"",
          "description": "Hide video player's info bar.",
          "valueSet": "v"
        },
        {
          "name": "hideInfo",
          "description": "Hide video player's info bar."
        },
        {
          "name": "${enableJsApi:enableJsApi}=\"$1\"",
          "description": "Enable YouTube JavaScript API",
          "valueSet": "v"
        },
        {
          "name": "enableJsApi",
          "description": "Enable YouTube JavaScript API"
        },
        {
          "name": "${playlist:playlist}=\"$1\"",
          "description": "Comma seperated list of video IDs to be played.",
          "valueSet": "v"
        },
        {
          "name": "playlist",
          "description": "Comma seperated list of video IDs to be played."
        },
        {
          "name": "${loop:loop}=\"$1\"",
          "description": "Play the video in a loop.",
          "valueSet": "v"
        },
        {
          "name": "loop",
          "description": "Play the video in a loop."
        },
        {
          "name": "${start:start}=\"$1\"",
          "description": "Start playing after seconds.",
          "valueSet": "v"
        },
        {
          "name": "start",
          "description": "Start playing after seconds."
        },
        {
          "name": "${end:end}=\"$1\"",
          "description": "Stop playing after seconds.",
          "valueSet": "v"
        },
        {
          "name": "end",
          "description": "Stop playing after seconds."
        },
        {
          "name": "${lightTheme:lightTheme}=\"$1\"",
          "description": "Use the YouTube player's light theme.",
          "valueSet": "v"
        },
        {
          "name": "lightTheme",
          "description": "Use the YouTube player's light theme."
        },
        {
          "name": "${videoQuality:videoQuality}=\"$1\"",
          "description": "Set the YouTube player's video quality (hd1080,hd720,highres,large,medium,small).",
          "valueSet": "v"
        },
        {
          "name": "videoQuality",
          "description": "Set the YouTube player's video quality (hd1080,hd720,highres,large,medium,small)."
        },
        {
          "name": "${windowMode:windowMode}=\"$1\"",
          "description": "Set the Window-Mode of the YouTube player (transparent,opaque). This is necessary for z-index handling in IE10/11.",
          "valueSet": "v"
        },
        {
          "name": "windowMode",
          "description": "Set the Window-Mode of the YouTube player (transparent,opaque). This is necessary for z-index handling in IE10/11."
        }
      ]
    },
    {
      "name": "v:menu",
      "description": "### Page: Menu ViewHelper ViewHelper for rendering TYPO3 menus in Fluid Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel"
        }
      ]
    },
    {
      "name": "v:menu.browse",
      "description": "### Page: Browse Menu ViewHelper ViewHelper for rendering TYPO3 browse menus in Fluid Renders links to browse inside a menu branch including first, previous, next, last and up to the parent page. Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${labelFirst:labelFirst}=\"$1\"",
          "description": "Label for the \"first\" link",
          "valueSet": "v"
        },
        {
          "name": "labelFirst",
          "description": "Label for the \"first\" link"
        },
        {
          "name": "${labelLast:labelLast}=\"$1\"",
          "description": "Label for the \"last\" link",
          "valueSet": "v"
        },
        {
          "name": "labelLast",
          "description": "Label for the \"last\" link"
        },
        {
          "name": "${labelPrevious:labelPrevious}=\"$1\"",
          "description": "Label for the \"previous\" link",
          "valueSet": "v"
        },
        {
          "name": "labelPrevious",
          "description": "Label for the \"previous\" link"
        },
        {
          "name": "${labelNext:labelNext}=\"$1\"",
          "description": "Label for the \"next\" link",
          "valueSet": "v"
        },
        {
          "name": "labelNext",
          "description": "Label for the \"next\" link"
        },
        {
          "name": "${labelUp:labelUp}=\"$1\"",
          "description": "Label for the \"up\" link",
          "valueSet": "v"
        },
        {
          "name": "labelUp",
          "description": "Label for the \"up\" link"
        },
        {
          "name": "${renderFirst:renderFirst}=\"$1\"",
          "description": "If set to FALSE the \"first\" link will not be rendered",
          "valueSet": "v"
        },
        {
          "name": "renderFirst",
          "description": "If set to FALSE the \"first\" link will not be rendered"
        },
        {
          "name": "${renderLast:renderLast}=\"$1\"",
          "description": "If set to FALSE the \"last\" link will not be rendered",
          "valueSet": "v"
        },
        {
          "name": "renderLast",
          "description": "If set to FALSE the \"last\" link will not be rendered"
        },
        {
          "name": "${renderUp:renderUp}=\"$1\"",
          "description": "If set to FALSE the \"up\" link will not be rendered",
          "valueSet": "v"
        },
        {
          "name": "renderUp",
          "description": "If set to FALSE the \"up\" link will not be rendered"
        },
        {
          "name": "${usePageTitles:usePageTitles}=\"$1\"",
          "description": "If set to TRUE, uses target page titles instead of \"next\", \"previous\" etc. labels",
          "valueSet": "v"
        },
        {
          "name": "usePageTitles",
          "description": "If set to TRUE, uses target page titles instead of \"next\", \"previous\" etc. labels"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional parent page UID to use as top level of menu. If unspecified, current page UID is used",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional parent page UID to use as top level of menu. If unspecified, current page UID is used"
        },
        {
          "name": "${currentPageUid:currentPageUid}=\"$1\"",
          "description": "Optional page UID to use as current page. If unspecified, current page UID from globals is used",
          "valueSet": "v"
        },
        {
          "name": "currentPageUid",
          "description": "Optional page UID to use as current page. If unspecified, current page UID from globals is used"
        }
      ]
    },
    {
      "name": "v:menu.deferred",
      "description": "### Page: Deferred menu rendering ViewHelper Place this ViewHelper inside any other ViewHelper which has been configured with the `deferred` attribute set to TRUE - this will cause the output of the parent to only contain the content of this ViewHelper. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        }
      ]
    },
    {
      "name": "v:menu.directory",
      "description": "### Page: Directory Menu ViewHelper ViewHelper for rendering TYPO3 list menus in Fluid Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pages:pages}=\"$1\"",
          "description": "Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "pages",
          "description": "Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable."
        }
      ]
    },
    {
      "name": "v:menu.list",
      "description": "### Page: List Menu ViewHelper ViewHelper for rendering TYPO3 list menus in Fluid Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pages:pages}=\"$1\"",
          "description": "Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "pages",
          "description": "Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable."
        }
      ]
    },
    {
      "name": "v:menu.sub",
      "description": "### Page: Auto Sub Menu ViewHelper Recycles the parent menu ViewHelper instance, resetting the page UID used as starting point and repeating rendering of the exact same tag content. Used in custom menu rendering to indicate where a submenu is to be rendered; accepts only a single argument called `pageUid` which defines the new starting page UID that is used in the recycled parent menu instance. /",
      "attributes": [
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Page UID to be overridden in the recycled rendering of the parent instance, if one exists",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Page UID to be overridden in the recycled rendering of the parent instance, if one exists"
        }
      ]
    },
    {
      "name": "v:once.cookie",
      "description": "Once: Cookie Displays nested content or \"then\" child once, then sets a cookie with $ttl, optionally locked to domain name, which makes the condition return FALSE as long as the cookie exists. \"Once\"-style ViewHelpers are purposed to only display their nested content once per XYZ, where the XYZ depends on the specific type of ViewHelper (session, cookie etc). In addition the ViewHelper is a ConditionViewHelper, which means you can utilize the f:then and f:else child nodes as well as the \"then\" and \"else\" arguments. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${identifier:identifier}=\"$1\"",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)",
          "valueSet": "v"
        },
        {
          "name": "identifier",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)"
        },
        {
          "name": "${lockToDomain:lockToDomain}=\"$1\"",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition",
          "valueSet": "v"
        },
        {
          "name": "lockToDomain",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition"
        },
        {
          "name": "${ttl:ttl}=\"$1\"",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset",
          "valueSet": "v"
        },
        {
          "name": "ttl",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset"
        }
      ]
    },
    {
      "name": "v:once.instance",
      "description": "Once: Instance Displays nested content or \"then\" child once per instance of the content element or plugin being rendered, as identified by the contentObject UID (or globally if no contentObject is associated). \"Once\"-style ViewHelpers are purposed to only display their nested content once per XYZ, where the XYZ depends on the specific type of ViewHelper (session, cookie etc). In addition the ViewHelper is a ConditionViewHelper, which means you can utilize the f:then and f:else child nodes as well as the \"then\" and \"else\" arguments. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${identifier:identifier}=\"$1\"",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)",
          "valueSet": "v"
        },
        {
          "name": "identifier",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)"
        },
        {
          "name": "${lockToDomain:lockToDomain}=\"$1\"",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition",
          "valueSet": "v"
        },
        {
          "name": "lockToDomain",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition"
        },
        {
          "name": "${ttl:ttl}=\"$1\"",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset",
          "valueSet": "v"
        },
        {
          "name": "ttl",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset"
        }
      ]
    },
    {
      "name": "v:once.session",
      "description": "Once: Session Displays nested content or \"then\" child once per session. \"Once\"-style ViewHelpers are purposed to only display their nested content once per XYZ, where the XYZ depends on the specific type of ViewHelper (session, cookie etc). In addition the ViewHelper is a ConditionViewHelper, which means you can utilize the f:then and f:else child nodes as well as the \"then\" and \"else\" arguments. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${identifier:identifier}=\"$1\"",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)",
          "valueSet": "v"
        },
        {
          "name": "identifier",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)"
        },
        {
          "name": "${lockToDomain:lockToDomain}=\"$1\"",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition",
          "valueSet": "v"
        },
        {
          "name": "lockToDomain",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition"
        },
        {
          "name": "${ttl:ttl}=\"$1\"",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset",
          "valueSet": "v"
        },
        {
          "name": "ttl",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset"
        }
      ]
    },
    {
      "name": "v:once.standard",
      "description": "Once: Standard Displays nested content or \"then\" child once per rendering stack - i.e. per Layout, or Template if no Layout is used. \"Once\"-style ViewHelpers are purposed to only display their nested content once per XYZ, where the XYZ depends on the specific type of ViewHelper (session, cookie etc). In addition the ViewHelper is a ConditionViewHelper, which means you can utilize the f:then and f:else child nodes as well as the \"then\" and \"else\" arguments. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${identifier:identifier}=\"$1\"",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)",
          "valueSet": "v"
        },
        {
          "name": "identifier",
          "description": "Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)"
        },
        {
          "name": "${lockToDomain:lockToDomain}=\"$1\"",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition",
          "valueSet": "v"
        },
        {
          "name": "lockToDomain",
          "description": "If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition"
        },
        {
          "name": "${ttl:ttl}=\"$1\"",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset",
          "valueSet": "v"
        },
        {
          "name": "ttl",
          "description": "Time-to-live for skip registration, number of seconds. After this expires the registration is unset"
        }
      ]
    },
    {
      "name": "v:or",
      "description": "If content is empty use alternative text (can also be LLL:labelname shortcut or LLL:EXT: file paths). /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Input to either use, if not empty",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Input to either use, if not empty"
        },
        {
          "name": "${alternative:alternative}=\"$1\"",
          "description": "Alternative if content is empty, can use LLL: shortcut",
          "valueSet": "v"
        },
        {
          "name": "alternative",
          "description": "Alternative if content is empty, can use LLL: shortcut"
        },
        {
          "name": "${arguments:arguments}=\"$1\"",
          "description": "Arguments to be replaced in the resulting string",
          "valueSet": "v"
        },
        {
          "name": "arguments",
          "description": "Arguments to be replaced in the resulting string"
        },
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "UpperCamelCase extension name without vendor prefix",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "UpperCamelCase extension name without vendor prefix"
        }
      ]
    },
    {
      "name": "v:page.absoluteUrl",
      "description": "Returns a full, absolute URL to this page with all arguments. /",
      "attributes": []
    },
    {
      "name": "v:page.breadCrumb",
      "description": "ViewHelper to make a breadcrumb link set from a pageUid, automatic or manual. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel.",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel."
        },
        {
          "name": "${endLevel:endLevel}=\"$1\"",
          "description": "Optional deepest level of rendering. If left out all levels up to the current are rendered.",
          "valueSet": "v"
        },
        {
          "name": "endLevel",
          "description": "Optional deepest level of rendering. If left out all levels up to the current are rendered."
        }
      ]
    },
    {
      "name": "v:page.footer",
      "description": "ViewHelper used to place header blocks in document footer /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to insert in header/footer",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to insert in header/footer"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "If not using tag content, specify path to file here",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "If not using tag content, specify path to file here"
        },
        {
          "name": "${external:external}=\"$1\"",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets",
          "valueSet": "v"
        },
        {
          "name": "external",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\"",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\""
        },
        {
          "name": "${overwrite:overwrite}=\"$1\"",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.",
          "valueSet": "v"
        },
        {
          "name": "overwrite",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite."
        },
        {
          "name": "${dependencies:dependencies}=\"$1\"",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies",
          "valueSet": "v"
        },
        {
          "name": "dependencies",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies"
        },
        {
          "name": "${group:group}=\"$1\"",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.",
          "valueSet": "v"
        },
        {
          "name": "group",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs."
        },
        {
          "name": "${debug:debug}=\"$1\"",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper",
          "valueSet": "v"
        },
        {
          "name": "debug",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper"
        },
        {
          "name": "${standalone:standalone}=\"$1\"",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied",
          "valueSet": "v"
        },
        {
          "name": "standalone",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied"
        },
        {
          "name": "${rewrite:rewrite}=\"$1\"",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls",
          "valueSet": "v"
        },
        {
          "name": "rewrite",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls"
        },
        {
          "name": "${fluid:fluid}=\"$1\"",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified",
          "valueSet": "v"
        },
        {
          "name": "fluid",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same"
        },
        {
          "name": "${movable:movable}=\"$1\"",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.",
          "valueSet": "v"
        },
        {
          "name": "movable",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS."
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything."
        },
        {
          "name": "${namedChunks:namedChunks}=\"$1\"",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency",
          "valueSet": "v"
        },
        {
          "name": "namedChunks",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency"
        }
      ]
    },
    {
      "name": "v:page.header",
      "description": "ViewHelper used to place header blocks in document header /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to insert in header/footer",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to insert in header/footer"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "If not using tag content, specify path to file here",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "If not using tag content, specify path to file here"
        },
        {
          "name": "${external:external}=\"$1\"",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets",
          "valueSet": "v"
        },
        {
          "name": "external",
          "description": "If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\"",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument \"overwrite\""
        },
        {
          "name": "${overwrite:overwrite}=\"$1\"",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.",
          "valueSet": "v"
        },
        {
          "name": "overwrite",
          "description": "If set to FALSE and a relocated string with \"name\" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite."
        },
        {
          "name": "${dependencies:dependencies}=\"$1\"",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies",
          "valueSet": "v"
        },
        {
          "name": "dependencies",
          "description": "CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies"
        },
        {
          "name": "${group:group}=\"$1\"",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.",
          "valueSet": "v"
        },
        {
          "name": "group",
          "description": "Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs."
        },
        {
          "name": "${debug:debug}=\"$1\"",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper",
          "valueSet": "v"
        },
        {
          "name": "debug",
          "description": "If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper"
        },
        {
          "name": "${standalone:standalone}=\"$1\"",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied",
          "valueSet": "v"
        },
        {
          "name": "standalone",
          "description": "If TRUE, excludes this Asset from any concatenation which may be applied"
        },
        {
          "name": "${rewrite:rewrite}=\"$1\"",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls",
          "valueSet": "v"
        },
        {
          "name": "rewrite",
          "description": "If FALSE, this Asset will be included as is without any processing of contained urls"
        },
        {
          "name": "${fluid:fluid}=\"$1\"",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified",
          "valueSet": "v"
        },
        {
          "name": "fluid",
          "description": "If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the \"variables\" attribute or every available template variable if \"variables\" not specified"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "An optional array of arguments which you use inside the Asset, be it standalone or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same"
        },
        {
          "name": "${movable:movable}=\"$1\"",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.",
          "valueSet": "v"
        },
        {
          "name": "movable",
          "description": "If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS."
        },
        {
          "name": "${trim:trim}=\"$1\"",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.",
          "valueSet": "v"
        },
        {
          "name": "trim",
          "description": "DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything."
        },
        {
          "name": "${namedChunks:namedChunks}=\"$1\"",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency",
          "valueSet": "v"
        },
        {
          "name": "namedChunks",
          "description": "If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency"
        }
      ]
    },
    {
      "name": "v:page.header.alternate",
      "description": "Returns the all alternate urls. /",
      "attributes": [
        {
          "name": "${languages:languages}=\"$1\"",
          "description": "The languages (either CSV, array or implementing Traversable)",
          "valueSet": "v"
        },
        {
          "name": "languages",
          "description": "The languages (either CSV, array or implementing Traversable)"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "The page uid to check",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "The page uid to check"
        },
        {
          "name": "${normalWhenNoLanguage:normalWhenNoLanguage}=\"$1\"",
          "description": "If TRUE, a missing page overlay should be ignored",
          "valueSet": "v"
        },
        {
          "name": "normalWhenNoLanguage",
          "description": "If TRUE, a missing page overlay should be ignored"
        },
        {
          "name": "${addQueryString:addQueryString}=\"$1\"",
          "description": "If TRUE, the current query parameters will be kept in the URI",
          "valueSet": "v"
        },
        {
          "name": "addQueryString",
          "description": "If TRUE, the current query parameters will be kept in the URI"
        }
      ]
    },
    {
      "name": "v:page.header.canonical",
      "description": "Returns the current canonical url in a link tag. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "The page uid to check",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "The page uid to check"
        },
        {
          "name": "${queryStringMethod:queryStringMethod}=\"$1\"",
          "description": "From which place to add parameters. Values: \"GET\", \"POST\" and \"GET,POST\". See https://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Typolink/Index.html, addQueryString.method",
          "valueSet": "v"
        },
        {
          "name": "queryStringMethod",
          "description": "From which place to add parameters. Values: \"GET\", \"POST\" and \"GET,POST\". See https://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Typolink/Index.html, addQueryString.method"
        },
        {
          "name": "${normalWhenNoLanguage:normalWhenNoLanguage}=\"$1\"",
          "description": "DEPRECATED: Visibility is now handled by core's typolink function.",
          "valueSet": "v"
        },
        {
          "name": "normalWhenNoLanguage",
          "description": "DEPRECATED: Visibility is now handled by core's typolink function."
        }
      ]
    },
    {
      "name": "v:page.header.link",
      "description": "ViewHelper used to render a link tag in the `<head>` section of the page. If you use the ViewHelper in a plugin, the plugin and its action have to be cached! /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${rel:rel}=\"$1\"",
          "description": "Property: rel",
          "valueSet": "v"
        },
        {
          "name": "rel",
          "description": "Property: rel"
        },
        {
          "name": "${href:href}=\"$1\"",
          "description": "Property: href",
          "valueSet": "v"
        },
        {
          "name": "href",
          "description": "Property: href"
        },
        {
          "name": "${type:type}=\"$1\"",
          "description": "Property: type",
          "valueSet": "v"
        },
        {
          "name": "type",
          "description": "Property: type"
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Property: lang",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Property: lang"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Property: dir",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Property: dir"
        }
      ]
    },
    {
      "name": "v:page.header.meta",
      "description": "ViewHelper used to render a meta tag If you use the ViewHelper in a plugin it has to be USER not USER_INT, what means it has to be cached! /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name property of meta tag",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name property of meta tag"
        },
        {
          "name": "${property:property}=\"$1\"",
          "description": "Property of meta tag",
          "valueSet": "v"
        },
        {
          "name": "property",
          "description": "Property of meta tag"
        },
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content of meta tag",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content of meta tag"
        },
        {
          "name": "${http-equiv:http-equiv}=\"$1\"",
          "description": "Property: http-equiv",
          "valueSet": "v"
        },
        {
          "name": "http-equiv",
          "description": "Property: http-equiv"
        },
        {
          "name": "${scheme:scheme}=\"$1\"",
          "description": "Property: scheme",
          "valueSet": "v"
        },
        {
          "name": "scheme",
          "description": "Property: scheme"
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Property: lang",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Property: lang"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Property: dir",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Property: dir"
        }
      ]
    },
    {
      "name": "v:page.header.title",
      "description": "### ViewHelper used to override page title This ViewHelper uses the TYPO3 PageRenderer to set the page title - with everything this implies regarding support for TypoScript settings. Specifically you should note the setting `config.noPageTitle` which must be set to either 1 (one) in case no other source defines the page title (it's likely that at least one does), or 2 (two) to indicate that the TS-controlled page title must be disabled. A value of 2 (two) ensures that the title used in this ViewHelper will be used in the rendered page. If you use the ViewHelper in a plugin it has to be USER not USER_INT, what means it has to be cached! #### Why can I not forcibly override the title? This has been opted out with full intention. The reasoning behind not allowing a Fluid template to forcibly override the page title that may be set through TypoScript is that many other extensions (mainly SEO-focused ones) will be setting and manipulating the page title - and if overridden in a template file using a ViewHelper, it would be almost impossible to detect unless you already know exactly where to look. Enforcing use of the core behavior is the only way to ensure that this ViewHelper can coexist with other extensions in a fully controllable way. /",
      "attributes": [
        {
          "name": "${title:title}=\"$1\"",
          "description": "Title tag content",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Title tag content"
        },
        {
          "name": "${whitespaceString:whitespaceString}=\"$1\"",
          "description": "String used to replace groups of white space characters, one replacement inserted per group",
          "valueSet": "v"
        },
        {
          "name": "whitespaceString",
          "description": "String used to replace groups of white space characters, one replacement inserted per group"
        },
        {
          "name": "${setIndexedDocTitle:setIndexedDocTitle}=\"$1\"",
          "description": "Set indexed doc title to title",
          "valueSet": "v"
        },
        {
          "name": "setIndexedDocTitle",
          "description": "Set indexed doc title to title"
        }
      ]
    },
    {
      "name": "v:page.info",
      "description": "ViewHelper to access data of the current page record. Does not work in the TYPO3 backend. /",
      "attributes": [
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "If specified, this UID will be used to fetch page data instead of using the current page.",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "If specified, this UID will be used to fetch page data instead of using the current page."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "If specified, only this field will be returned/assigned instead of the complete page record.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "If specified, only this field will be returned/assigned instead of the complete page record."
        }
      ]
    },
    {
      "name": "v:page.languageMenu",
      "description": "ViewHelper for rendering TYPO3 menus in Fluid Require the extension static_info_table. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container, list and flags (not finished) only",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container, list and flags (not finished) only"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links, list and flags only",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links, list and flags only"
        },
        {
          "name": "${defaultIsoFlag:defaultIsoFlag}=\"$1\"",
          "description": "ISO code of the default flag",
          "valueSet": "v"
        },
        {
          "name": "defaultIsoFlag",
          "description": "ISO code of the default flag"
        },
        {
          "name": "${defaultLanguageLabel:defaultLanguageLabel}=\"$1\"",
          "description": "Label for the default language",
          "valueSet": "v"
        },
        {
          "name": "defaultLanguageLabel",
          "description": "Label for the default language"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "Orders the languageIds after this list",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "Orders the languageIds after this list"
        },
        {
          "name": "${labelOverwrite:labelOverwrite}=\"$1\"",
          "description": "Overrides language labels",
          "valueSet": "v"
        },
        {
          "name": "labelOverwrite",
          "description": "Overrides language labels"
        },
        {
          "name": "${hideNotTranslated:hideNotTranslated}=\"$1\"",
          "description": "Hides languageIDs which are not translated",
          "valueSet": "v"
        },
        {
          "name": "hideNotTranslated",
          "description": "Hides languageIDs which are not translated"
        },
        {
          "name": "${layout:layout}=\"$1\"",
          "description": "How to render links when using autorendering. Possible selections: name,flag - use fx \"name\" or \"flag,name\" or \"name,flag\"",
          "valueSet": "v"
        },
        {
          "name": "layout",
          "description": "How to render links when using autorendering. Possible selections: name,flag - use fx \"name\" or \"flag,name\" or \"name,flag\""
        },
        {
          "name": "${useCHash:useCHash}=\"$1\"",
          "description": "Use cHash for typolink",
          "valueSet": "v"
        },
        {
          "name": "useCHash",
          "description": "Use cHash for typolink"
        },
        {
          "name": "${flagPath:flagPath}=\"$1\"",
          "description": "Overwrites the path to the flag folder",
          "valueSet": "v"
        },
        {
          "name": "flagPath",
          "description": "Overwrites the path to the flag folder"
        },
        {
          "name": "${flagImageType:flagImageType}=\"$1\"",
          "description": "Sets type of flag image: png, gif, jpeg",
          "valueSet": "v"
        },
        {
          "name": "flagImageType",
          "description": "Sets type of flag image: png, gif, jpeg"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "Sets flag to link current language or not",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "Sets flag to link current language or not"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Sets the class, by which the current language will be marked",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Sets the class, by which the current language will be marked"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional page uid to use.",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional page uid to use."
        },
        {
          "name": "${configuration:configuration}=\"$1\"",
          "description": "Additional typoLink configuration",
          "valueSet": "v"
        },
        {
          "name": "configuration",
          "description": "Additional typoLink configuration"
        },
        {
          "name": "${excludeQueryVars:excludeQueryVars}=\"$1\"",
          "description": "Comma-separate list of variables to exclude",
          "valueSet": "v"
        },
        {
          "name": "excludeQueryVars",
          "description": "Comma-separate list of variables to exclude"
        },
        {
          "name": "${languages:languages}=\"$1\"",
          "description": "Array, CSV or Traversable containing UIDs of languages to render",
          "valueSet": "v"
        },
        {
          "name": "languages",
          "description": "Array, CSV or Traversable containing UIDs of languages to render"
        }
      ]
    },
    {
      "name": "v:page.language",
      "description": "Returns the current language from languages depending on l18n settings. /",
      "attributes": [
        {
          "name": "${languages:languages}=\"$1\"",
          "description": "The languages (either CSV, array or implementing Traversable)",
          "valueSet": "v"
        },
        {
          "name": "languages",
          "description": "The languages (either CSV, array or implementing Traversable)"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "The page uid to check",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "The page uid to check"
        },
        {
          "name": "${normalWhenNoLanguage:normalWhenNoLanguage}=\"$1\"",
          "description": "If TRUE, a missing page overlay should be ignored",
          "valueSet": "v"
        },
        {
          "name": "normalWhenNoLanguage",
          "description": "If TRUE, a missing page overlay should be ignored"
        }
      ]
    },
    {
      "name": "v:page.link",
      "description": "### Page: Link ViewHelper Viewhelper for rendering page links This viewhelper behaves identically to Fluid's link viewhelper except for it fetches the title of the provided page UID and inserts it as linktext if that is omitted. The link will not render at all if the requested page is not translated in the current language. Automatic linktext: <v:page.link pageUid=\"UID\" /> Manual linktext: <v:page.link pageUid=\"UID\">linktext</v:page.link> /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${target:target}=\"$1\"",
          "description": "Target of link",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "Target of link"
        },
        {
          "name": "${rel:rel}=\"$1\"",
          "description": "Specifies the relationship between the current document and the linked document",
          "valueSet": "v"
        },
        {
          "name": "rel",
          "description": "Specifies the relationship between the current document and the linked document"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "UID of the page to create the link and fetch the title for.",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "UID of the page to create the link and fetch the title for."
        },
        {
          "name": "${additionalParams:additionalParams}=\"$1\"",
          "description": "Query parameters to be attached to the resulting URI",
          "valueSet": "v"
        },
        {
          "name": "additionalParams",
          "description": "Query parameters to be attached to the resulting URI"
        },
        {
          "name": "${pageType:pageType}=\"$1\"",
          "description": "Type of the target page. See typolink.parameter",
          "valueSet": "v"
        },
        {
          "name": "pageType",
          "description": "Type of the target page. See typolink.parameter"
        },
        {
          "name": "${noCache:noCache}=\"$1\"",
          "description": "When TRUE disables caching for the target page. You should not need this.",
          "valueSet": "v"
        },
        {
          "name": "noCache",
          "description": "When TRUE disables caching for the target page. You should not need this."
        },
        {
          "name": "${noCacheHash:noCacheHash}=\"$1\"",
          "description": "When TRUE supresses the cHash query parameter created by TypoLink. You should not need this.",
          "valueSet": "v"
        },
        {
          "name": "noCacheHash",
          "description": "When TRUE supresses the cHash query parameter created by TypoLink. You should not need this."
        },
        {
          "name": "${section:section}=\"$1\"",
          "description": "The anchor to be added to the URI",
          "valueSet": "v"
        },
        {
          "name": "section",
          "description": "The anchor to be added to the URI"
        },
        {
          "name": "${linkAccessRestrictedPages:linkAccessRestrictedPages}=\"$1\"",
          "description": "DEPRECATED: Use showAccessProtected instead.",
          "valueSet": "v"
        },
        {
          "name": "linkAccessRestrictedPages",
          "description": "DEPRECATED: Use showAccessProtected instead."
        },
        {
          "name": "${absolute:absolute}=\"$1\"",
          "description": "When TRUE, the URI of the rendered link is absolute",
          "valueSet": "v"
        },
        {
          "name": "absolute",
          "description": "When TRUE, the URI of the rendered link is absolute"
        },
        {
          "name": "${addQueryString:addQueryString}=\"$1\"",
          "description": "When TRUE, the current query parameters will be kept in the URI",
          "valueSet": "v"
        },
        {
          "name": "addQueryString",
          "description": "When TRUE, the current query parameters will be kept in the URI"
        },
        {
          "name": "${argumentsToBeExcludedFromQueryString:argumentsToBeExcludedFromQueryString}=\"$1\"",
          "description": "Arguments to be removed from the URI. Only active if $addQueryString = TRUE",
          "valueSet": "v"
        },
        {
          "name": "argumentsToBeExcludedFromQueryString",
          "description": "Arguments to be removed from the URI. Only active if $addQueryString = TRUE"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${pageTitleAs:pageTitleAs}=\"$1\"",
          "description": "When rendering child content, supplies page title as variable.",
          "valueSet": "v"
        },
        {
          "name": "pageTitleAs",
          "description": "When rendering child content, supplies page title as variable."
        }
      ]
    },
    {
      "name": "v:page.menu",
      "description": "### Page: Menu ViewHelper ViewHelper for rendering TYPO3 menus in Fluid Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. DEPRECATED: use v:menu instead /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel"
        }
      ]
    },
    {
      "name": "v:page.menu.browse",
      "description": "### Page: Browse Menu ViewHelper ViewHelper for rendering TYPO3 browse menus in Fluid Renders links to browse inside a menu branch including first, previous, next, last and up to the parent page. Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. DEPRECATED: use v:menu.browse instead /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${labelFirst:labelFirst}=\"$1\"",
          "description": "Label for the \"first\" link",
          "valueSet": "v"
        },
        {
          "name": "labelFirst",
          "description": "Label for the \"first\" link"
        },
        {
          "name": "${labelLast:labelLast}=\"$1\"",
          "description": "Label for the \"last\" link",
          "valueSet": "v"
        },
        {
          "name": "labelLast",
          "description": "Label for the \"last\" link"
        },
        {
          "name": "${labelPrevious:labelPrevious}=\"$1\"",
          "description": "Label for the \"previous\" link",
          "valueSet": "v"
        },
        {
          "name": "labelPrevious",
          "description": "Label for the \"previous\" link"
        },
        {
          "name": "${labelNext:labelNext}=\"$1\"",
          "description": "Label for the \"next\" link",
          "valueSet": "v"
        },
        {
          "name": "labelNext",
          "description": "Label for the \"next\" link"
        },
        {
          "name": "${labelUp:labelUp}=\"$1\"",
          "description": "Label for the \"up\" link",
          "valueSet": "v"
        },
        {
          "name": "labelUp",
          "description": "Label for the \"up\" link"
        },
        {
          "name": "${renderFirst:renderFirst}=\"$1\"",
          "description": "If set to FALSE the \"first\" link will not be rendered",
          "valueSet": "v"
        },
        {
          "name": "renderFirst",
          "description": "If set to FALSE the \"first\" link will not be rendered"
        },
        {
          "name": "${renderLast:renderLast}=\"$1\"",
          "description": "If set to FALSE the \"last\" link will not be rendered",
          "valueSet": "v"
        },
        {
          "name": "renderLast",
          "description": "If set to FALSE the \"last\" link will not be rendered"
        },
        {
          "name": "${renderUp:renderUp}=\"$1\"",
          "description": "If set to FALSE the \"up\" link will not be rendered",
          "valueSet": "v"
        },
        {
          "name": "renderUp",
          "description": "If set to FALSE the \"up\" link will not be rendered"
        },
        {
          "name": "${usePageTitles:usePageTitles}=\"$1\"",
          "description": "If set to TRUE, uses target page titles instead of \"next\", \"previous\" etc. labels",
          "valueSet": "v"
        },
        {
          "name": "usePageTitles",
          "description": "If set to TRUE, uses target page titles instead of \"next\", \"previous\" etc. labels"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional parent page UID to use as top level of menu. If unspecified, current page UID is used",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional parent page UID to use as top level of menu. If unspecified, current page UID is used"
        },
        {
          "name": "${currentPageUid:currentPageUid}=\"$1\"",
          "description": "Optional page UID to use as current page. If unspecified, current page UID from globals is used",
          "valueSet": "v"
        },
        {
          "name": "currentPageUid",
          "description": "Optional page UID to use as current page. If unspecified, current page UID from globals is used"
        }
      ]
    },
    {
      "name": "v:page.menu.deferred",
      "description": "### Page: Deferred menu rendering ViewHelper Place this ViewHelper inside any other ViewHelper which has been configured with the `deferred` attribute set to TRUE - this will cause the output of the parent to only contain the content of this ViewHelper. DEPRECATED: use v:menu.deferred instead /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        }
      ]
    },
    {
      "name": "v:page.menu.directory",
      "description": "### Page: Directory Menu ViewHelper ViewHelper for rendering TYPO3 list menus in Fluid Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. DEPRECATED: use v:menu.directory instead /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pages:pages}=\"$1\"",
          "description": "Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "pages",
          "description": "Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable."
        }
      ]
    },
    {
      "name": "v:page.menu.list",
      "description": "### Page: List Menu ViewHelper ViewHelper for rendering TYPO3 list menus in Fluid Supports both automatic, tag-based rendering (which defaults to `ul > li` with options to set both the parent and child tag names. When using manual rendering a range of support CSS classes are available along with each page record. DEPRECATED: use v:menu.list instead /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${showAccessProtected:showAccessProtected}=\"$1\"",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status",
          "valueSet": "v"
        },
        {
          "name": "showAccessProtected",
          "description": "If TRUE links to access protected pages are always rendered regardless of user login status"
        },
        {
          "name": "${classAccessProtected:classAccessProtected}=\"$1\"",
          "description": "Optional class name to add to links which are access protected",
          "valueSet": "v"
        },
        {
          "name": "classAccessProtected",
          "description": "Optional class name to add to links which are access protected"
        },
        {
          "name": "${classAccessGranted:classAccessGranted}=\"$1\"",
          "description": "Optional class name to add to links which are access protected but access is actually granted",
          "valueSet": "v"
        },
        {
          "name": "classAccessGranted",
          "description": "Optional class name to add to links which are access protected but access is actually granted"
        },
        {
          "name": "${useShortcutUid:useShortcutUid}=\"$1\"",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.",
          "valueSet": "v"
        },
        {
          "name": "useShortcutUid",
          "description": "If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData."
        },
        {
          "name": "${useShortcutTarget:useShortcutTarget}=\"$1\"",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link",
          "valueSet": "v"
        },
        {
          "name": "useShortcutTarget",
          "description": "Optional param for using shortcut target instead of shortcut itself for current link"
        },
        {
          "name": "${useShortcutData:useShortcutData}=\"$1\"",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously",
          "valueSet": "v"
        },
        {
          "name": "useShortcutData",
          "description": "Shortcut to set useShortcutTarget and useShortcutData simultaneously"
        },
        {
          "name": "${tagName:tagName}=\"$1\"",
          "description": "Tag name to use for enclosing container",
          "valueSet": "v"
        },
        {
          "name": "tagName",
          "description": "Tag name to use for enclosing container"
        },
        {
          "name": "${tagNameChildren:tagNameChildren}=\"$1\"",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode.",
          "valueSet": "v"
        },
        {
          "name": "tagNameChildren",
          "description": "Tag name to use for child nodes surrounding links. If set to \"a\" enables non-wrapping mode."
        },
        {
          "name": "${entryLevel:entryLevel}=\"$1\"",
          "description": "Optional entryLevel TS equivalent of the menu",
          "valueSet": "v"
        },
        {
          "name": "entryLevel",
          "description": "Optional entryLevel TS equivalent of the menu"
        },
        {
          "name": "${levels:levels}=\"$1\"",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel",
          "valueSet": "v"
        },
        {
          "name": "levels",
          "description": "Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel"
        },
        {
          "name": "${expandAll:expandAll}=\"$1\"",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus",
          "valueSet": "v"
        },
        {
          "name": "expandAll",
          "description": "If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus"
        },
        {
          "name": "${classFirst:classFirst}=\"$1\"",
          "description": "Optional class name for the first menu elment",
          "valueSet": "v"
        },
        {
          "name": "classFirst",
          "description": "Optional class name for the first menu elment"
        },
        {
          "name": "${classLast:classLast}=\"$1\"",
          "description": "Optional class name for the last menu elment",
          "valueSet": "v"
        },
        {
          "name": "classLast",
          "description": "Optional class name for the last menu elment"
        },
        {
          "name": "${classActive:classActive}=\"$1\"",
          "description": "Optional class name to add to active links",
          "valueSet": "v"
        },
        {
          "name": "classActive",
          "description": "Optional class name to add to active links"
        },
        {
          "name": "${classCurrent:classCurrent}=\"$1\"",
          "description": "Optional class name to add to current link",
          "valueSet": "v"
        },
        {
          "name": "classCurrent",
          "description": "Optional class name to add to current link"
        },
        {
          "name": "${classHasSubpages:classHasSubpages}=\"$1\"",
          "description": "Optional class name to add to links which have subpages",
          "valueSet": "v"
        },
        {
          "name": "classHasSubpages",
          "description": "Optional class name to add to links which have subpages"
        },
        {
          "name": "${substElementUid:substElementUid}=\"$1\"",
          "description": "Optional parameter for wrapping the link with the uid of the page",
          "valueSet": "v"
        },
        {
          "name": "substElementUid",
          "description": "Optional parameter for wrapping the link with the uid of the page"
        },
        {
          "name": "${showHiddenInMenu:showHiddenInMenu}=\"$1\"",
          "description": "Include pages that are set to be hidden in menus",
          "valueSet": "v"
        },
        {
          "name": "showHiddenInMenu",
          "description": "Include pages that are set to be hidden in menus"
        },
        {
          "name": "${showCurrent:showCurrent}=\"$1\"",
          "description": "If FALSE, does not display the current page",
          "valueSet": "v"
        },
        {
          "name": "showCurrent",
          "description": "If FALSE, does not display the current page"
        },
        {
          "name": "${linkCurrent:linkCurrent}=\"$1\"",
          "description": "If FALSE, does not wrap the current page in a link",
          "valueSet": "v"
        },
        {
          "name": "linkCurrent",
          "description": "If FALSE, does not wrap the current page in a link"
        },
        {
          "name": "${linkActive:linkActive}=\"$1\"",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline",
          "valueSet": "v"
        },
        {
          "name": "linkActive",
          "description": "If FALSE, does not wrap with links the titles of pages that are active in the rootline"
        },
        {
          "name": "${titleFields:titleFields}=\"$1\"",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays.",
          "valueSet": "v"
        },
        {
          "name": "titleFields",
          "description": "CSV list of fields to use as link label - default is \"nav_title,title\", change to for example \"tx_myext_somefield,subtitle,nav_title,title\". The first field that contains text will be used. Field value resolved AFTER page field overlays."
        },
        {
          "name": "${includeAnchorTitle:includeAnchorTitle}=\"$1\"",
          "description": "If TRUE, includes the page title as title attribute on the anchor.",
          "valueSet": "v"
        },
        {
          "name": "includeAnchorTitle",
          "description": "If TRUE, includes the page title as title attribute on the anchor."
        },
        {
          "name": "${includeSpacers:includeSpacers}=\"$1\"",
          "description": "Wether or not to include menu spacers in the page select query",
          "valueSet": "v"
        },
        {
          "name": "includeSpacers",
          "description": "Wether or not to include menu spacers in the page select query"
        },
        {
          "name": "${deferred:deferred}=\"$1\"",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering",
          "valueSet": "v"
        },
        {
          "name": "deferred",
          "description": "If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering"
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered."
        },
        {
          "name": "${rootLineAs:rootLineAs}=\"$1\"",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used",
          "valueSet": "v"
        },
        {
          "name": "rootLineAs",
          "description": "If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used"
        },
        {
          "name": "${excludePages:excludePages}=\"$1\"",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "excludePages",
          "description": "Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable."
        },
        {
          "name": "${forceAbsoluteUrl:forceAbsoluteUrl}=\"$1\"",
          "description": "If TRUE, the menu will be rendered with absolute URLs",
          "valueSet": "v"
        },
        {
          "name": "forceAbsoluteUrl",
          "description": "If TRUE, the menu will be rendered with absolute URLs"
        },
        {
          "name": "${doktypes:doktypes}=\"$1\"",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts.",
          "valueSet": "v"
        },
        {
          "name": "doktypes",
          "description": "DEPRECATED: Please use typical doktypes for starting points like shortcuts."
        },
        {
          "name": "${divider:divider}=\"$1\"",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure",
          "valueSet": "v"
        },
        {
          "name": "divider",
          "description": "Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure"
        },
        {
          "name": "${pages:pages}=\"$1\"",
          "description": "Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable.",
          "valueSet": "v"
        },
        {
          "name": "pages",
          "description": "Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable."
        }
      ]
    },
    {
      "name": "v:page.menu.sub",
      "description": "### Page: Auto Sub Menu ViewHelper Recycles the parent menu ViewHelper instance, resetting the page UID used as starting point and repeating rendering of the exact same tag content. Used in custom menu rendering to indicate where a submenu is to be rendered; accepts only a single argument called `pageUid` which defines the new starting page UID that is used in the recycled parent menu instance. DEPRECATED: use v:menu.sub instead /",
      "attributes": [
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Page UID to be overridden in the recycled rendering of the parent instance, if one exists",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Page UID to be overridden in the recycled rendering of the parent instance, if one exists"
        }
      ]
    },
    {
      "name": "v:page.resources",
      "description": "Page FAL resources ViewHelper. /",
      "attributes": [
        {
          "name": "${table:table}=\"$1\"",
          "description": "The table to lookup records.",
          "valueSet": "v"
        },
        {
          "name": "table",
          "description": "The table to lookup records."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "The field of the table associated to resources.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "The field of the table associated to resources."
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "The actual record. Alternatively you can use the \"uid\" argument.",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "The actual record. Alternatively you can use the \"uid\" argument."
        },
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument.",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        }
      ]
    },
    {
      "name": "v:page.resources.fal",
      "description": "Page FAL resource ViewHelper. /",
      "attributes": [
        {
          "name": "${table:table}=\"$1\"",
          "description": "The table to lookup records.",
          "valueSet": "v"
        },
        {
          "name": "table",
          "description": "The table to lookup records."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "The field of the table associated to resources.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "The field of the table associated to resources."
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "The actual record. Alternatively you can use the \"uid\" argument.",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "The actual record. Alternatively you can use the \"uid\" argument."
        },
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument.",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Optional limit to the total number of records to render",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Optional limit to the total number of records to render"
        },
        {
          "name": "${slide:slide}=\"$1\"",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used",
          "valueSet": "v"
        },
        {
          "name": "slide",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used"
        },
        {
          "name": "${slideCollect:slideCollect}=\"$1\"",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide.",
          "valueSet": "v"
        },
        {
          "name": "slideCollect",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide."
        },
        {
          "name": "${slideCollectReverse:slideCollectReverse}=\"$1\"",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))",
          "valueSet": "v"
        },
        {
          "name": "slideCollectReverse",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))"
        }
      ]
    },
    {
      "name": "v:page.rootline",
      "description": "ViewHelper to get the rootline of a page. /",
      "attributes": [
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "Optional page uid to use.",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "Optional page uid to use."
        }
      ]
    },
    {
      "name": "v:page.staticPrefix",
      "description": "### Page: Static Prefix Use this ViewHelper to read the contents of the `plugin.tx_vhs.settings.prependPath` TypoScript location - this setting stores the static prefix which gets added to all relative resource URIs generated by VHS; whenever you require a ViewHelper which does not respect this setting you can use this ViewHelper to prepend that setting after the value is returned from the other ViewHelper. /",
      "attributes": []
    },
    {
      "name": "v:random.number",
      "description": "### Random: Number Generator Generates a random number. The default minimum number is set to 100000 in order to generate a longer integer string representation. Decimal values can be generated as well. /",
      "attributes": [
        {
          "name": "${minimum:minimum}=\"$1\"",
          "description": "Minimum number - defaults to 100000 (default max is 999999 for equal string lengths)",
          "valueSet": "v"
        },
        {
          "name": "minimum",
          "description": "Minimum number - defaults to 100000 (default max is 999999 for equal string lengths)"
        },
        {
          "name": "${maximum:maximum}=\"$1\"",
          "description": "Maximum number - defaults to 999999 (default min is 100000 for equal string lengths)",
          "valueSet": "v"
        },
        {
          "name": "maximum",
          "description": "Maximum number - defaults to 999999 (default min is 100000 for equal string lengths)"
        },
        {
          "name": "${minimumDecimals:minimumDecimals}=\"$1\"",
          "description": "Minimum number of also randomized decimal digits to add to number",
          "valueSet": "v"
        },
        {
          "name": "minimumDecimals",
          "description": "Minimum number of also randomized decimal digits to add to number"
        },
        {
          "name": "${maximumDecimals:maximumDecimals}=\"$1\"",
          "description": "Maximum number of also randomized decimal digits to add to number",
          "valueSet": "v"
        },
        {
          "name": "maximumDecimals",
          "description": "Maximum number of also randomized decimal digits to add to number"
        }
      ]
    },
    {
      "name": "v:random.string",
      "description": "### Random: String Generator Use either `minimumLength` / `maximumLength` or just `length`. Specify the characters which can be randomized using `characters`. Has built-in insurance that first character of random string is an alphabetic character (allowing safe use as DOM id for example). /",
      "attributes": [
        {
          "name": "${length:length}=\"$1\"",
          "description": "Length of string to generate",
          "valueSet": "v"
        },
        {
          "name": "length",
          "description": "Length of string to generate"
        },
        {
          "name": "${minimumLength:minimumLength}=\"$1\"",
          "description": "Minimum length of string if random length",
          "valueSet": "v"
        },
        {
          "name": "minimumLength",
          "description": "Minimum length of string if random length"
        },
        {
          "name": "${maximumLength:maximumLength}=\"$1\"",
          "description": "Minimum length of string if random length",
          "valueSet": "v"
        },
        {
          "name": "maximumLength",
          "description": "Minimum length of string if random length"
        },
        {
          "name": "${characters:characters}=\"$1\"",
          "description": "Characters to use in string",
          "valueSet": "v"
        },
        {
          "name": "characters",
          "description": "Characters to use in string"
        }
      ]
    },
    {
      "name": "v:render.ascii",
      "description": "### Render: ASCII Character Renders a single character identified by its charset number. For example: `<v:render.character ascii=\"10\" /> renders a UNIX linebreak as does {v:render.character(ascii: 10)}. Can be used in combination with `v:iterator.loop` to render sequences or repeat the same character: {v:render.ascii(ascii: 10) -> v:iterator.loop(count: 5)} And naturally you can feed any integer variable or ViewHelper return value into the `ascii` parameter throught `renderChildren` to allow chaining: {variableWithAsciiInteger -> v:render.ascii()} And arrays are also supported - they will produce a string of characters from each number in the array: {v:render.ascii(ascii: {0: 13, 1: 10})} Will produce a Windows line break, \\r\\n. /",
      "attributes": [
        {
          "name": "${ascii:ascii}=\"$1\"",
          "description": "ASCII character to render",
          "valueSet": "v"
        },
        {
          "name": "ascii",
          "description": "ASCII character to render"
        }
      ]
    },
    {
      "name": "v:render.cache",
      "description": "### Cache Rendering ViewHelper Caches the child content (any type supported as long as it can be serialized). Because of the added overhead you should only use this if what you are caching is complex enough that it performs many DB request (for example when displaying an object with many lazy properties which don't load until the template asks for the property value). In short, applies to just about the same use cases as any other cache - but remember that Fluid is already a very efficient rendering engine so don't just assume that using the ViewHelper will increase performance or decrease memory usage. Works forcibly, i.e. can only re-render its content if the cache is cleared. A CTRL+Refresh in the browser does nothing, even if a BE user is logged in. Only use this ViewHelper around content which you are absolutely sure it makes sense to cache along with an identity - for example, if rendering an uncached plugin which contains a Partial template that is in all aspects just a solid-state HTML representation of something like a list of current news. The cache behind this ViewHelper is the Extbase object cache, which is cleared when you clear the page content cache. Do not use on form elements, it will invalidate the checksum. Do not use around ViewHelpers which add header data or which interact with the PageRenderer or other \"live\" objects; this includes many of the VHS ViewHelpers! /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Content to be cached",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Content to be cached"
        },
        {
          "name": "${identity:identity}=\"$1\"",
          "description": "Identity for cached entry",
          "valueSet": "v"
        },
        {
          "name": "identity",
          "description": "Identity for cached entry"
        },
        {
          "name": "${onError:onError}=\"$1\"",
          "description": "Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)",
          "valueSet": "v"
        },
        {
          "name": "onError",
          "description": "Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)"
        },
        {
          "name": "${graceful:graceful}=\"$1\"",
          "description": "If forced to FALSE, errors are not caught but rather \"transmitted\" as every other error would be",
          "valueSet": "v"
        },
        {
          "name": "graceful",
          "description": "If forced to FALSE, errors are not caught but rather \"transmitted\" as every other error would be"
        }
      ]
    },
    {
      "name": "v:render.inline",
      "description": "### Render: Inline Render as string containing Fluid as if it were part of the template currently being rendered. Environment (template variables etc.) is cloned but not re-merged after rendering, which means that any and all changes in variables that happen while rendering this inline code will be destroyed after sub-rendering is finished. /",
      "attributes": [
        {
          "name": "${content:content}=\"$1\"",
          "description": "Template code to render as Fluid (usually from a variable)",
          "valueSet": "v"
        },
        {
          "name": "content",
          "description": "Template code to render as Fluid (usually from a variable)"
        },
        {
          "name": "${namespaces:namespaces}=\"$1\"",
          "description": "Optional additional/overridden namespaces, [\"ns\" => \"MyVendor\\MyExt\\ViewHelpers\"]",
          "valueSet": "v"
        },
        {
          "name": "namespaces",
          "description": "Optional additional/overridden namespaces, [\"ns\" => \"MyVendor\\MyExt\\ViewHelpers\"]"
        },
        {
          "name": "${onError:onError}=\"$1\"",
          "description": "Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)",
          "valueSet": "v"
        },
        {
          "name": "onError",
          "description": "Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)"
        },
        {
          "name": "${graceful:graceful}=\"$1\"",
          "description": "If forced to FALSE, errors are not caught but rather \"transmitted\" as every other error would be",
          "valueSet": "v"
        },
        {
          "name": "graceful",
          "description": "If forced to FALSE, errors are not caught but rather \"transmitted\" as every other error would be"
        }
      ]
    },
    {
      "name": "v:render.record",
      "description": "ViewHelper used to render raw content records typically fetched with `<v:content.get(column: '0', render: FALSE) />`. If you simply want to render a content element, try `<v:content.render>`. /",
      "attributes": [
        {
          "name": "${column:column}=\"$1\"",
          "description": "Column position number (colPos) of the column to render",
          "valueSet": "v"
        },
        {
          "name": "column",
          "description": "Column position number (colPos) of the column to render"
        },
        {
          "name": "${order:order}=\"$1\"",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records.",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "Optional sort field of content elements - RAND() supported. Note that when sliding is enabled, the sorting will be applied to records on a per-page basis and not to the total set of collected records."
        },
        {
          "name": "${sortDirection:sortDirection}=\"$1\"",
          "description": "Optional sort direction of content elements",
          "valueSet": "v"
        },
        {
          "name": "sortDirection",
          "description": "Optional sort direction of content elements"
        },
        {
          "name": "${pageUid:pageUid}=\"$1\"",
          "description": "If set, selects only content from this page UID",
          "valueSet": "v"
        },
        {
          "name": "pageUid",
          "description": "If set, selects only content from this page UID"
        },
        {
          "name": "${contentUids:contentUids}=\"$1\"",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array",
          "valueSet": "v"
        },
        {
          "name": "contentUids",
          "description": "If used, replaces all conditions with an \"uid IN (1,2,3)\" style condition using the UID values from this array"
        },
        {
          "name": "${sectionIndexOnly:sectionIndexOnly}=\"$1\"",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\"",
          "valueSet": "v"
        },
        {
          "name": "sectionIndexOnly",
          "description": "If TRUE, only renders/gets content that is marked as \"include in section index\""
        },
        {
          "name": "${loadRegister:loadRegister}=\"$1\"",
          "description": "List of LOAD_REGISTER variable",
          "valueSet": "v"
        },
        {
          "name": "loadRegister",
          "description": "List of LOAD_REGISTER variable"
        },
        {
          "name": "${render:render}=\"$1\"",
          "description": "Render result",
          "valueSet": "v"
        },
        {
          "name": "render",
          "description": "Render result"
        },
        {
          "name": "${hideUntranslated:hideUntranslated}=\"$1\"",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version",
          "valueSet": "v"
        },
        {
          "name": "hideUntranslated",
          "description": "If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version"
        },
        {
          "name": "${limit:limit}=\"$1\"",
          "description": "Optional limit to the total number of records to render",
          "valueSet": "v"
        },
        {
          "name": "limit",
          "description": "Optional limit to the total number of records to render"
        },
        {
          "name": "${slide:slide}=\"$1\"",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used",
          "valueSet": "v"
        },
        {
          "name": "slide",
          "description": "Enables Record Sliding - amount of levels which shall get walked up the rootline, including the current page. For infinite sliding (till the rootpage) set to -1. Only the first PID which has at minimum one record is used"
        },
        {
          "name": "${slideCollect:slideCollect}=\"$1\"",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide.",
          "valueSet": "v"
        },
        {
          "name": "slideCollect",
          "description": "If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide."
        },
        {
          "name": "${slideCollectReverse:slideCollectReverse}=\"$1\"",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))",
          "valueSet": "v"
        },
        {
          "name": "slideCollectReverse",
          "description": "Normally when collecting records the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))"
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "Record to render",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "Record to render"
        }
      ]
    },
    {
      "name": "v:render.request",
      "description": "### Render: Request Renders a sub-request to the desired Extension, Plugin, Controller and action with the desired arguments. Note: arguments must not be wrapped with the prefix used in GET/POST parameters but must be provided as if the arguments were sent directly to the Controller action. /",
      "attributes": [
        {
          "name": "${onError:onError}=\"$1\"",
          "description": "Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)",
          "valueSet": "v"
        },
        {
          "name": "onError",
          "description": "Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)"
        },
        {
          "name": "${graceful:graceful}=\"$1\"",
          "description": "If forced to FALSE, errors are not caught but rather \"transmitted\" as every other error would be",
          "valueSet": "v"
        },
        {
          "name": "graceful",
          "description": "If forced to FALSE, errors are not caught but rather \"transmitted\" as every other error would be"
        },
        {
          "name": "${action:action}=\"$1\"",
          "description": "Controller action to call in request",
          "valueSet": "v"
        },
        {
          "name": "action",
          "description": "Controller action to call in request"
        },
        {
          "name": "${controller:controller}=\"$1\"",
          "description": "Controller name to call in request",
          "valueSet": "v"
        },
        {
          "name": "controller",
          "description": "Controller name to call in request"
        },
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Extension name scope to use in request",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Extension name scope to use in request"
        },
        {
          "name": "${vendorName:vendorName}=\"$1\"",
          "description": "Vendor name scope to use in request",
          "valueSet": "v"
        },
        {
          "name": "vendorName",
          "description": "Vendor name scope to use in request"
        },
        {
          "name": "${pluginName:pluginName}=\"$1\"",
          "description": "Plugin name scope to use in request",
          "valueSet": "v"
        },
        {
          "name": "pluginName",
          "description": "Plugin name scope to use in request"
        },
        {
          "name": "${arguments:arguments}=\"$1\"",
          "description": "Arguments to use in request",
          "valueSet": "v"
        },
        {
          "name": "arguments",
          "description": "Arguments to use in request"
        }
      ]
    },
    {
      "name": "v:render.template",
      "description": "### Render: Template Render a template file (with arguments if desired). Supports passing variables and controlling the format, paths can be overridden and uses the same format as TS settings a' la plugin.tx_myext.view, which means that this can be done (from any extension, not just \"foo\") <v:render.template file=\"EXT:foo/Resources/Private/Templates/Action/Show.html\" variables=\"{object: customLoadedObject}\" paths=\"{v:variable.typoscript(path: 'plugin.tx_foo.view')}\" format=\"xml\" /> Which would render the \"show\" action's template from EXT:foo using paths define in that extension's typoscript but using a custom loaded object when rendering the template rather than the object defined by the \"Action\" controller of EXT:foo. The output would be in XML format and this format would also be respected by Layouts and Partials which are rendered from the Show.html template. As such this is very similar to Render/RequestViewHelper with two major differences: 1. A true ControllerContext is not present when rendering which means that links generated in the template should be made always including all parameters from ExtensionName over PluginName through the usual action etc. 2. The Controller from EXT:foo is not involved in any way, which means that any custom variables the particular template depends on must be added manually through the \"variables\" argument Consider using Render/InlineViewHelper if you are rendering templates from the same plugin. Consider using Render/RequestViewHelper if you require a completely isolated rendering identical to that which takes place when rendering an Extbase plugin's content object. /",
      "attributes": [
        {
          "name": "${file:file}=\"$1\"",
          "description": "Path to template file, EXT:myext/... paths supported",
          "valueSet": "v"
        },
        {
          "name": "file",
          "description": "Path to template file, EXT:myext/... paths supported"
        },
        {
          "name": "${variables:variables}=\"$1\"",
          "description": "Optional array of template variables for rendering",
          "valueSet": "v"
        },
        {
          "name": "variables",
          "description": "Optional array of template variables for rendering"
        },
        {
          "name": "${format:format}=\"$1\"",
          "description": "Optional format of the template(s) being rendered",
          "valueSet": "v"
        },
        {
          "name": "format",
          "description": "Optional format of the template(s) being rendered"
        },
        {
          "name": "${paths:paths}=\"$1\"",
          "description": "Optional array of arrays of layout and partial root paths, EXT:mypath/... paths supported",
          "valueSet": "v"
        },
        {
          "name": "paths",
          "description": "Optional array of arrays of layout and partial root paths, EXT:mypath/... paths supported"
        }
      ]
    },
    {
      "name": "v:render.uncache",
      "description": "Uncaches partials. Use like ``f:render``. The partial will then be rendered each time. Please be aware that this will impact render time. Arguments must be serializable and will be cached. /",
      "attributes": [
        {
          "name": "${partial:partial}=\"$1\"",
          "description": "Reference to a partial.",
          "valueSet": "v"
        },
        {
          "name": "partial",
          "description": "Reference to a partial."
        },
        {
          "name": "${section:section}=\"$1\"",
          "description": "Name of section inside the partial to render.",
          "valueSet": "v"
        },
        {
          "name": "section",
          "description": "Name of section inside the partial to render."
        },
        {
          "name": "${arguments:arguments}=\"$1\"",
          "description": "Arguments to pass to the partial.",
          "valueSet": "v"
        },
        {
          "name": "arguments",
          "description": "Arguments to pass to the partial."
        }
      ]
    },
    {
      "name": "v:resource.collection",
      "description": "### Collection ViewHelper This viewhelper returns a collection referenced by uid. For more information look here: http://docs.typo3.org/typo3cms/CoreApiReference/6.2/ApiOverview/Collections/Index.html#collections-api ### Example {v:resource.collection(uid:'123') -> v:var.set(name: 'someCollection')} /",
      "attributes": [
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "UID of the collection to be rendered",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "UID of the collection to be rendered"
        }
      ]
    },
    {
      "name": "v:resource.file",
      "description": "ViewHelper to output or assign FAL sys_file records. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${identifier:identifier}=\"$1\"",
          "description": "The FAL combined identifiers (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "identifier",
          "description": "The FAL combined identifiers (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${categories:categories}=\"$1\"",
          "description": "The sys_category records to select the resources from (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "categories",
          "description": "The sys_category records to select the resources from (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${treatIdAsUid:treatIdAsUid}=\"$1\"",
          "description": "If TRUE, the identifier argument is treated as resource uids.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsUid",
          "description": "If TRUE, the identifier argument is treated as resource uids."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${onlyProperties:onlyProperties}=\"$1\"",
          "description": "Whether to return only the properties array of the sys_file record and not the File object itself",
          "valueSet": "v"
        },
        {
          "name": "onlyProperties",
          "description": "Whether to return only the properties array of the sys_file record and not the File object itself"
        }
      ]
    },
    {
      "name": "v:resource.image",
      "description": "ViewHelper to output or assign a image from FAL. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${identifier:identifier}=\"$1\"",
          "description": "The FAL combined identifiers (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "identifier",
          "description": "The FAL combined identifiers (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${categories:categories}=\"$1\"",
          "description": "The sys_category records to select the resources from (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "categories",
          "description": "The sys_category records to select the resources from (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${treatIdAsUid:treatIdAsUid}=\"$1\"",
          "description": "If TRUE, the identifier argument is treated as resource uids.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsUid",
          "description": "If TRUE, the identifier argument is treated as resource uids."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "If FALSE resource URIs are rendered absolute. URIs in backend mode are always absolute.",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "If FALSE resource URIs are rendered absolute. URIs in backend mode are always absolute."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options."
        },
        {
          "name": "${minWidth:minWidth}=\"$1\"",
          "description": "Minimum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "minWidth",
          "description": "Minimum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options."
        },
        {
          "name": "${minHeight:minHeight}=\"$1\"",
          "description": "Minimum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "minHeight",
          "description": "Minimum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options."
        },
        {
          "name": "${maxWidth:maxWidth}=\"$1\"",
          "description": "Maximum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "maxWidth",
          "description": "Maximum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options."
        },
        {
          "name": "${maxHeight:maxHeight}=\"$1\"",
          "description": "Maximum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "maxHeight",
          "description": "Maximum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${usemap:usemap}=\"$1\"",
          "description": "A hash-name reference to a map element with which to associate the image.",
          "valueSet": "v"
        },
        {
          "name": "usemap",
          "description": "A hash-name reference to a map element with which to associate the image."
        },
        {
          "name": "${ismap:ismap}=\"$1\"",
          "description": "Specifies that its img element provides access to a server-side image map.",
          "valueSet": "v"
        },
        {
          "name": "ismap",
          "description": "Specifies that its img element provides access to a server-side image map."
        },
        {
          "name": "${alt:alt}=\"$1\"",
          "description": "Equivalent content for those who cannot process images or who have image loading disabled.",
          "valueSet": "v"
        },
        {
          "name": "alt",
          "description": "Equivalent content for those who cannot process images or who have image loading disabled."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        }
      ]
    },
    {
      "name": "v:resource.language",
      "description": "Resource: Language Reads a certain language file with returning not just one single label, but all the translated labels. ### Examples <!-- Tag usage for force getting labels in a specific language (different to current is possible too) --> <v:resource.language extensionName=\"myext\" path=\"Path/To/Locallang.xlf\" languageKey=\"en\"/> <!-- Tag usage for getting labels of current language --> <v:resource.language extensionName=\"myext\" path=\"Path/To/Locallang.xlf\"/> /",
      "attributes": [
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${extensionName:extensionName}=\"$1\"",
          "description": "Name of the extension",
          "valueSet": "v"
        },
        {
          "name": "extensionName",
          "description": "Name of the extension"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "Absolute or relative path to the locallang file",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Absolute or relative path to the locallang file"
        },
        {
          "name": "${languageKey:languageKey}=\"$1\"",
          "description": "Key for getting translation of a different than current initialized language",
          "valueSet": "v"
        },
        {
          "name": "languageKey",
          "description": "Key for getting translation of a different than current initialized language"
        }
      ]
    },
    {
      "name": "v:resource.record",
      "description": "Generic FAL resource ViewHelper /",
      "attributes": [
        {
          "name": "${table:table}=\"$1\"",
          "description": "The table to lookup records.",
          "valueSet": "v"
        },
        {
          "name": "table",
          "description": "The table to lookup records."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "The field of the table associated to resources.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "The field of the table associated to resources."
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "The actual record. Alternatively you can use the \"uid\" argument.",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "The actual record. Alternatively you can use the \"uid\" argument."
        },
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument.",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        }
      ]
    },
    {
      "name": "v:resource.record.fal",
      "description": "Resolve FAL relations and return file records. ### Render a single image linked from a TCA record We assume that the table `tx_users` has a column `photo`, which is a FAL relation field configured with [`ExtensionManagementUtility::getFileFieldTCAConfig()`] (https://docs.typo3.org/typo3cms/TCAReference/Reference/Columns/Inline/Index.html#file-abstraction-layer). The template also has a `user` variable containing one of the table's records. At first, fetch the record and store it in a variable. Then use `<f:image>` to render it: {v:resource.record.fal(table: 'tx_users', field: 'photo', record: user) -> v:iterator.first() -> v:variable.set(name: 'image')} <f:if condition=\"{image}\"> <f:image treatIdAsReference=\"1\" src=\"{image.id}\" title=\"{image.title}\" alt=\"{image.alternative}\"/> </f:if> Use the `uid` attribute if you don't have a `record`. /",
      "attributes": [
        {
          "name": "${table:table}=\"$1\"",
          "description": "The table to lookup records.",
          "valueSet": "v"
        },
        {
          "name": "table",
          "description": "The table to lookup records."
        },
        {
          "name": "${field:field}=\"$1\"",
          "description": "The field of the table associated to resources.",
          "valueSet": "v"
        },
        {
          "name": "field",
          "description": "The field of the table associated to resources."
        },
        {
          "name": "${record:record}=\"$1\"",
          "description": "The actual record. Alternatively you can use the \"uid\" argument.",
          "valueSet": "v"
        },
        {
          "name": "record",
          "description": "The actual record. Alternatively you can use the \"uid\" argument."
        },
        {
          "name": "${uid:uid}=\"$1\"",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument.",
          "valueSet": "v"
        },
        {
          "name": "uid",
          "description": "The uid of the record. Alternatively you can use the \"record\" argument."
        },
        {
          "name": "${as:as}=\"$1\"",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "If specified, a template variable with this name containing the requested data will be inserted instead of returning it."
        }
      ]
    },
    {
      "name": "v:security.allow",
      "description": "### Security: Allow Allows access to the child content based on given arguments. The ViewHelper is a condition based ViewHelper which means it supports the `f:then` and `f:else` child nodes - you can use this behaviour to invert the access (i.e. use f:else in a check if a frontend user is logged in, if you want to hide content from authenticated users): <v:security.allow anyFrontendUser=\"TRUE\"> <f:then><!-- protected information displayed --></f:then> <f:else><!-- link to login form displayed --></f:else> </v:security.allow> Is the mirror opposite of `v:security.deny`. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${anyFrontendUser:anyFrontendUser}=\"$1\"",
          "description": "If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser",
          "valueSet": "v"
        },
        {
          "name": "anyFrontendUser",
          "description": "If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser"
        },
        {
          "name": "${anyFrontendUserGroup:anyFrontendUserGroup}=\"$1\"",
          "description": "If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser",
          "valueSet": "v"
        },
        {
          "name": "anyFrontendUserGroup",
          "description": "If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser"
        },
        {
          "name": "${frontendUser:frontendUser}=\"$1\"",
          "description": "The FrontendUser to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUser",
          "description": "The FrontendUser to allow/deny"
        },
        {
          "name": "${frontendUsers:frontendUsers}=\"$1\"",
          "description": "The FrontendUsers ObjectStorage to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUsers",
          "description": "The FrontendUsers ObjectStorage to allow/deny"
        },
        {
          "name": "${frontendUserGroup:frontendUserGroup}=\"$1\"",
          "description": "The FrontendUserGroup to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUserGroup",
          "description": "The FrontendUserGroup to allow/deny"
        },
        {
          "name": "${frontendUserGroups:frontendUserGroups}=\"$1\"",
          "description": "The FrontendUserGroups ObjectStorage to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUserGroups",
          "description": "The FrontendUserGroups ObjectStorage to allow/deny"
        },
        {
          "name": "${anyBackendUser:anyBackendUser}=\"$1\"",
          "description": "If TRUE, allows any backend user unless other arguments disallows each specific backend user",
          "valueSet": "v"
        },
        {
          "name": "anyBackendUser",
          "description": "If TRUE, allows any backend user unless other arguments disallows each specific backend user"
        },
        {
          "name": "${backendUser:backendUser}=\"$1\"",
          "description": "The uid of a backend user to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "backendUser",
          "description": "The uid of a backend user to allow/deny"
        },
        {
          "name": "${backendUsers:backendUsers}=\"$1\"",
          "description": "The backend users list to allow/deny. If string, CSV of uids assumed, if array, array of uids assumed",
          "valueSet": "v"
        },
        {
          "name": "backendUsers",
          "description": "The backend users list to allow/deny. If string, CSV of uids assumed, if array, array of uids assumed"
        },
        {
          "name": "${backendUserGroup:backendUserGroup}=\"$1\"",
          "description": "The uid of the backend user group to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "backendUserGroup",
          "description": "The uid of the backend user group to allow/deny"
        },
        {
          "name": "${backendUserGroups:backendUserGroups}=\"$1\"",
          "description": "The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed",
          "valueSet": "v"
        },
        {
          "name": "backendUserGroups",
          "description": "The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed"
        },
        {
          "name": "${admin:admin}=\"$1\"",
          "description": "If TRUE, a backend user which is also an admin is required",
          "valueSet": "v"
        },
        {
          "name": "admin",
          "description": "If TRUE, a backend user which is also an admin is required"
        },
        {
          "name": "${evaluationType:evaluationType}=\"$1\"",
          "description": "Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used",
          "valueSet": "v"
        },
        {
          "name": "evaluationType",
          "description": "Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used"
        }
      ]
    },
    {
      "name": "v:security.deny",
      "description": "### Security: Deny Denies access to the child content based on given arguments. The ViewHelper is a condition based ViewHelper which means it supports the `f:then` and `f:else` child nodes. Is the mirror opposite of `v:security.allow`. /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        },
        {
          "name": "${anyFrontendUser:anyFrontendUser}=\"$1\"",
          "description": "If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser",
          "valueSet": "v"
        },
        {
          "name": "anyFrontendUser",
          "description": "If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser"
        },
        {
          "name": "${anyFrontendUserGroup:anyFrontendUserGroup}=\"$1\"",
          "description": "If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser",
          "valueSet": "v"
        },
        {
          "name": "anyFrontendUserGroup",
          "description": "If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser"
        },
        {
          "name": "${frontendUser:frontendUser}=\"$1\"",
          "description": "The FrontendUser to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUser",
          "description": "The FrontendUser to allow/deny"
        },
        {
          "name": "${frontendUsers:frontendUsers}=\"$1\"",
          "description": "The FrontendUsers ObjectStorage to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUsers",
          "description": "The FrontendUsers ObjectStorage to allow/deny"
        },
        {
          "name": "${frontendUserGroup:frontendUserGroup}=\"$1\"",
          "description": "The FrontendUserGroup to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUserGroup",
          "description": "The FrontendUserGroup to allow/deny"
        },
        {
          "name": "${frontendUserGroups:frontendUserGroups}=\"$1\"",
          "description": "The FrontendUserGroups ObjectStorage to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "frontendUserGroups",
          "description": "The FrontendUserGroups ObjectStorage to allow/deny"
        },
        {
          "name": "${anyBackendUser:anyBackendUser}=\"$1\"",
          "description": "If TRUE, allows any backend user unless other arguments disallows each specific backend user",
          "valueSet": "v"
        },
        {
          "name": "anyBackendUser",
          "description": "If TRUE, allows any backend user unless other arguments disallows each specific backend user"
        },
        {
          "name": "${backendUser:backendUser}=\"$1\"",
          "description": "The uid of a backend user to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "backendUser",
          "description": "The uid of a backend user to allow/deny"
        },
        {
          "name": "${backendUsers:backendUsers}=\"$1\"",
          "description": "The backend users list to allow/deny. If string, CSV of uids assumed, if array, array of uids assumed",
          "valueSet": "v"
        },
        {
          "name": "backendUsers",
          "description": "The backend users list to allow/deny. If string, CSV of uids assumed, if array, array of uids assumed"
        },
        {
          "name": "${backendUserGroup:backendUserGroup}=\"$1\"",
          "description": "The uid of the backend user group to allow/deny",
          "valueSet": "v"
        },
        {
          "name": "backendUserGroup",
          "description": "The uid of the backend user group to allow/deny"
        },
        {
          "name": "${backendUserGroups:backendUserGroups}=\"$1\"",
          "description": "The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed",
          "valueSet": "v"
        },
        {
          "name": "backendUserGroups",
          "description": "The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed"
        },
        {
          "name": "${admin:admin}=\"$1\"",
          "description": "If TRUE, a backend user which is also an admin is required",
          "valueSet": "v"
        },
        {
          "name": "admin",
          "description": "If TRUE, a backend user which is also an admin is required"
        },
        {
          "name": "${evaluationType:evaluationType}=\"$1\"",
          "description": "Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used",
          "valueSet": "v"
        },
        {
          "name": "evaluationType",
          "description": "Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used"
        }
      ]
    },
    {
      "name": "v:site.name",
      "description": "### Site: Name Returns the site name as specified in `$TYPO3_CONF_VARS`. /",
      "attributes": []
    },
    {
      "name": "v:site.url",
      "description": "### Site: URL Returns the website URL as returned by `\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::getIndpEnv('TYPO3_SITE_URL')` /",
      "attributes": []
    },
    {
      "name": "v:system.dateTime",
      "description": "### System: DateTime Returns the current system UNIX timestamp as DateTime. /",
      "attributes": []
    },
    {
      "name": "v:system.timestamp",
      "description": "### System: UNIX Timestamp Returns the current system UNIX timestamp as integer. Useful combined with the Math group of ViewHelpers: <!-- adds exactly one hour to a DateTime and formats it --> <f:format.date format=\"H:i\">{dateTime.timestamp -> v:math.sum(b: 3600)}</f:format.date> /",
      "attributes": []
    },
    {
      "name": "v:system.uniqId",
      "description": "### System: Unique ID Returns a unique ID based on PHP's uniqid-function. Comes in useful when handling/generating html-element-IDs for usage with JavaScript. /",
      "attributes": [
        {
          "name": "${prefix:prefix}=\"$1\"",
          "description": "An optional prefix for making sure it's unique across environments",
          "valueSet": "v"
        },
        {
          "name": "prefix",
          "description": "An optional prefix for making sure it's unique across environments"
        },
        {
          "name": "${moreEntropy:moreEntropy}=\"$1\"",
          "description": "Add some pseudo random strings. Refer to uniqid()'s Reference.",
          "valueSet": "v"
        },
        {
          "name": "moreEntropy",
          "description": "Add some pseudo random strings. Refer to uniqid()'s Reference."
        }
      ]
    },
    {
      "name": "v:tag",
      "description": "### Tag building ViewHelper Creates one HTML tag of any type, with various properties like class and ID applied only if arguments are not empty, rather than apply them always - empty or not - if provided. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${class:class}=\"$1\"",
          "description": "CSS class(es) for this element",
          "valueSet": "v"
        },
        {
          "name": "class",
          "description": "CSS class(es) for this element"
        },
        {
          "name": "${dir:dir}=\"$1\"",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)",
          "valueSet": "v"
        },
        {
          "name": "dir",
          "description": "Text direction for this HTML element. Allowed strings: \"ltr\" (left to right), \"rtl\" (right to left)"
        },
        {
          "name": "${id:id}=\"$1\"",
          "description": "Unique (in this file) identifier for this HTML element.",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "Unique (in this file) identifier for this HTML element."
        },
        {
          "name": "${lang:lang}=\"$1\"",
          "description": "Language for this element. Use short names specified in RFC 1766",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "Language for this element. Use short names specified in RFC 1766"
        },
        {
          "name": "${style:style}=\"$1\"",
          "description": "Individual CSS styles for this element",
          "valueSet": "v"
        },
        {
          "name": "style",
          "description": "Individual CSS styles for this element"
        },
        {
          "name": "${title:title}=\"$1\"",
          "description": "Tooltip text of element",
          "valueSet": "v"
        },
        {
          "name": "title",
          "description": "Tooltip text of element"
        },
        {
          "name": "${accesskey:accesskey}=\"$1\"",
          "description": "Keyboard shortcut to access this element",
          "valueSet": "v"
        },
        {
          "name": "accesskey",
          "description": "Keyboard shortcut to access this element"
        },
        {
          "name": "${tabindex:tabindex}=\"$1\"",
          "description": "Specifies the tab order of this element",
          "valueSet": "v"
        },
        {
          "name": "tabindex",
          "description": "Specifies the tab order of this element"
        },
        {
          "name": "${onclick:onclick}=\"$1\"",
          "description": "JavaScript evaluated for the onclick event",
          "valueSet": "v"
        },
        {
          "name": "onclick",
          "description": "JavaScript evaluated for the onclick event"
        },
        {
          "name": "${forceClosingTag:forceClosingTag}=\"$1\"",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags.",
          "valueSet": "v"
        },
        {
          "name": "forceClosingTag",
          "description": "If TRUE, forces the created tag to use a closing tag. If FALSE, allows self-closing tags."
        },
        {
          "name": "${hideIfEmpty:hideIfEmpty}=\"$1\"",
          "description": "Hide the tag completely if there is no tag content",
          "valueSet": "v"
        },
        {
          "name": "hideIfEmpty",
          "description": "Hide the tag completely if there is no tag content"
        },
        {
          "name": "${contenteditable:contenteditable}=\"$1\"",
          "description": "Specifies whether the contents of the element are editable.",
          "valueSet": "v"
        },
        {
          "name": "contenteditable",
          "description": "Specifies whether the contents of the element are editable."
        },
        {
          "name": "${contextmenu:contextmenu}=\"$1\"",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu.",
          "valueSet": "v"
        },
        {
          "name": "contextmenu",
          "description": "The value of the id attribute on the menu with which to associate the element as a context menu."
        },
        {
          "name": "${draggable:draggable}=\"$1\"",
          "description": "Specifies whether the element is draggable.",
          "valueSet": "v"
        },
        {
          "name": "draggable",
          "description": "Specifies whether the element is draggable."
        },
        {
          "name": "${dropzone:dropzone}=\"$1\"",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.",
          "valueSet": "v"
        },
        {
          "name": "dropzone",
          "description": "Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element."
        },
        {
          "name": "${translate:translate}=\"$1\"",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.",
          "valueSet": "v"
        },
        {
          "name": "translate",
          "description": "Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged."
        },
        {
          "name": "${spellcheck:spellcheck}=\"$1\"",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking."
        },
        {
          "name": "${hidden:hidden}=\"$1\"",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant.",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "Specifies that the element represents an element that is not yet, or is no longer, relevant."
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Tag name",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Tag name"
        }
      ]
    },
    {
      "name": "v:try",
      "description": "### Try ViewHelper Attempts to render child content. If an Exception is encountered while rendering, instead the `f:else` child node is rendered, if it is present. If `f:else` is not used, no output is returned. Can be used to perform complex translations of Exception messages which can occur. Can naturally also be used to provide a great deal of additional information about every possible Exception-type error which Fluid can encounter (and there are many). Note that this is a Condition ViewHelper which means you can use the `f:then` child node but it differs from regular Conditions by also allowing the template developer to skip the `f:then` child node and use the direct tag content as the \"TRUE\" condition and add an `f:else` which is only rendered in case of an Exception during rendering. Also note that you can use the `then` and `else` attributes; the `then` attribute is what is attempted rendered and the `else` attribute is what is rendered if retrieving the `then` attribute's value fails. Which clearly only makes sense if for example complex inline ViewHelpers are used in the attributes. ### Example usage #### Please note that this is a theoretical example! The example is theoretical in one major aspect: v:format.json.decode throws an Exception which Fluid displays as a string always - abstract from this and imagine that a plain Exception happens on errors. <v:try> <!-- assume that the variable {badJson} contains the string \"DontDecodeMe\" which if course is invalid JSON and cannot be decoded. The default behavior is to simply output a simple \"cannot decode\" string. --> <v:variable.set name=\"decodedBadJson\" value=\"{badJson -> v:format.json.decode()}\" /> Displayed only if the JSON decode worked. Much more code and many more ViewHelpers can go here. Now, imagine that this block spans so much code that potentially there could come an Exception from many additional places (for example from Widgets) and you cannot be sure where the Exception comes from but still want to tell the user what exactly went wrong and provide an error code which makes sense to send to developers if problems persist: <f:else> <h4> Error in \"{exception.trace.0.class -> v:iterator.explode(glue: '_') -> v:iterator.pop() -> v:format.replace(substring: 'ViewHelper', replacement: ''}\" <small>{exception.code}</small> <!-- Output example: \"Error in Decode <small>1358440054</small>\" --> </h4> <p> {exception.message} <!-- Output example: \"The provided argument is invalid JSON\" --> </p> <pre> Value: ``{exception.trace.0.args.0} <!-- Output example: \"Value: ``DontDecodeMe\" which is quite nice for developers to know as part of a bug report from users. --> </pre> </f:else> </v:try> ...or if you want a shorter version... <!-- Tries to encode an object, if it fails, falls back by returning a proper JSON value, thus preventing breakage by the JSON consumer whatever it may be. --> {v:try(then: '{badObject -> v:format.json.encode()}', else: '{\"validJson\": \"validValue\"')} <!-- Note: be VERY careful about the inline JSON syntax! It's very close to Fluids. Always double quote your object variables' names, that prevents almost all issues! --> /",
      "attributes": [
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        }
      ]
    },
    {
      "name": "v:unless",
      "description": "### Unless The opposite of `f:if` and only supporting negative matching. Related to `v:or` but allows more complex conditions. Is the same as writing: <f:if condition=\"{theThingToCheck}\"> <f:else> The thing that gets done </f:else> </f:if> Except without the `f:else`. #### Example, tag mode <v:unless condition=\"{somethingRequired}\"> Warning! Something required was not present. </v:unless> #### Example, inline mode illustrating `v:or` likeness {defaultText -> v:unless(condition: originalText)} // which is much the same as... {originalText -> v:or(alternative: defaultText} // ...but the \"unless\" counterpart supports anything as // condition instead of only checking \"is content empty?\" /",
      "attributes": [
        {
          "name": "${then:then}=\"$1\"",
          "description": "Value to be returned if the condition if met.",
          "valueSet": "v"
        },
        {
          "name": "then",
          "description": "Value to be returned if the condition if met."
        },
        {
          "name": "${else:else}=\"$1\"",
          "description": "Value to be returned if the condition if not met.",
          "valueSet": "v"
        },
        {
          "name": "else",
          "description": "Value to be returned if the condition if not met."
        },
        {
          "name": "${condition:condition}=\"$1\"",
          "description": "Condition expression conforming to Fluid boolean rules",
          "valueSet": "v"
        },
        {
          "name": "condition",
          "description": "Condition expression conforming to Fluid boolean rules"
        }
      ]
    },
    {
      "name": "v:uri.gravatar",
      "description": "Renders Gravatar URI. /",
      "attributes": [
        {
          "name": "${email:email}=\"$1\"",
          "description": "Email address",
          "valueSet": "v"
        },
        {
          "name": "email",
          "description": "Email address"
        },
        {
          "name": "${size:size}=\"$1\"",
          "description": "Size in pixels, defaults to 80px [ 1 - 2048 ]",
          "valueSet": "v"
        },
        {
          "name": "size",
          "description": "Size in pixels, defaults to 80px [ 1 - 2048 ]"
        },
        {
          "name": "${imageSet:imageSet}=\"$1\"",
          "description": "Default image set to use. Possible values [ 404 | mm | identicon | monsterid | wavatar ] ",
          "valueSet": "v"
        },
        {
          "name": "imageSet",
          "description": "Default image set to use. Possible values [ 404 | mm | identicon | monsterid | wavatar ] "
        },
        {
          "name": "${maximumRating:maximumRating}=\"$1\"",
          "description": "Maximum rating (inclusive) [ g | pg | r | x ]",
          "valueSet": "v"
        },
        {
          "name": "maximumRating",
          "description": "Maximum rating (inclusive) [ g | pg | r | x ]"
        },
        {
          "name": "${secure:secure}=\"$1\"",
          "description": "If it is FALSE will return the un secure Gravatar domain (www.gravatar.com)",
          "valueSet": "v"
        },
        {
          "name": "secure",
          "description": "If it is FALSE will return the un secure Gravatar domain (www.gravatar.com)"
        }
      ]
    },
    {
      "name": "v:uri.image",
      "description": "### Uri: Image Returns the relative or absolute URI for the image resource or it's derivate if differing dimesions are provided. /",
      "attributes": [
        {
          "name": "${additionalAttributes:additionalAttributes}=\"$1\"",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag.",
          "valueSet": "v"
        },
        {
          "name": "additionalAttributes",
          "description": "Additional tag attributes. They will be added directly to the resulting HTML tag."
        },
        {
          "name": "${data:data}=\"$1\"",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix.",
          "valueSet": "v"
        },
        {
          "name": "data",
          "description": "Additional data-* attributes. They will each be added with a \"data-\" prefix."
        },
        {
          "name": "${src:src}=\"$1\"",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).",
          "valueSet": "v"
        },
        {
          "name": "src",
          "description": "Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable)."
        },
        {
          "name": "${relative:relative}=\"$1\"",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.",
          "valueSet": "v"
        },
        {
          "name": "relative",
          "description": "If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute."
        },
        {
          "name": "${width:width}=\"$1\"",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "width",
          "description": "Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${height:height}=\"$1\"",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options.",
          "valueSet": "v"
        },
        {
          "name": "height",
          "description": "Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding \"m\" or \"c\" to the value. See imgResource.width for possible options."
        },
        {
          "name": "${maxW:maxW}=\"$1\"",
          "description": "Maximum Width of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxW",
          "description": "Maximum Width of the image. (no upscaling)"
        },
        {
          "name": "${maxH:maxH}=\"$1\"",
          "description": "Maximum Height of the image. (no upscaling)",
          "valueSet": "v"
        },
        {
          "name": "maxH",
          "description": "Maximum Height of the image. (no upscaling)"
        },
        {
          "name": "${minW:minW}=\"$1\"",
          "description": "Minimum Width of the image.",
          "valueSet": "v"
        },
        {
          "name": "minW",
          "description": "Minimum Width of the image."
        },
        {
          "name": "${minH:minH}=\"$1\"",
          "description": "Minimum Height of the image.",
          "valueSet": "v"
        },
        {
          "name": "minH",
          "description": "Minimum Height of the image."
        },
        {
          "name": "${format:format}=\"$1\"",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.",
          "valueSet": "v"
        },
        {
          "name": "format",
          "description": "Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account."
        },
        {
          "name": "${quality:quality}=\"$1\"",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.",
          "valueSet": "v"
        },
        {
          "name": "quality",
          "description": "Quality of the processed image. If blank/not present falls back to the default quality defined in install tool."
        },
        {
          "name": "${treatIdAsReference:treatIdAsReference}=\"$1\"",
          "description": "When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.",
          "valueSet": "v"
        },
        {
          "name": "treatIdAsReference",
          "description": "When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above."
        },
        {
          "name": "${canvasWidth:canvasWidth}=\"$1\"",
          "description": "Width of an optional canvas to place the image on.",
          "valueSet": "v"
        },
        {
          "name": "canvasWidth",
          "description": "Width of an optional canvas to place the image on."
        },
        {
          "name": "${canvasHeight:canvasHeight}=\"$1\"",
          "description": "Height of an optional canvas to place the image on.",
          "valueSet": "v"
        },
        {
          "name": "canvasHeight",
          "description": "Height of an optional canvas to place the image on."
        },
        {
          "name": "${canvasColor:canvasColor}=\"$1\"",
          "description": "Background color of an optional canvas to place the image on (hex triplet).",
          "valueSet": "v"
        },
        {
          "name": "canvasColor",
          "description": "Background color of an optional canvas to place the image on (hex triplet)."
        },
        {
          "name": "${transparencyColor:transparencyColor}=\"$1\"",
          "description": "Color to set transparent when using canvas feature (hex triplet).",
          "valueSet": "v"
        },
        {
          "name": "transparencyColor",
          "description": "Color to set transparent when using canvas feature (hex triplet)."
        },
        {
          "name": "${crop:crop}=\"$1\"",
          "description": "Information generated by the backend's graphical cropping UI",
          "valueSet": "v"
        },
        {
          "name": "crop",
          "description": "Information generated by the backend's graphical cropping UI"
        }
      ]
    },
    {
      "name": "v:uri.request",
      "description": "### Uri: Request Returns the Uri of the requested page (site_url + all the GET params) `\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL')`. /",
      "attributes": []
    },
    {
      "name": "v:uri.typolink",
      "description": "### TypolinkViewhelper Renders a uri with the TypoLink function. Can be used with the LinkWizard For more info on the typolink function, please consult the offical core-documentation: http://docs.typo3.org/typo3cms/TyposcriptIn45MinutesTutorial/TypoScriptFunctions/Typolink/Index.html DEPRECATED: Use TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper instead ### Examples <!-- tag --> <v:uri.typolink configuration=\"{typoLinkConfiguration}\" /> <v:uri.typolink configuration=\"{object}\" /> <!-- with a {parameter} variable containing the PID --> <v:uri.typolink configuration=\"{parameter: parameter}\" /> <!-- with a {fields.link} variable from the LinkWizard inside a flux form --> <v:uri.typolink configuration=\"{parameter: fields.link}\" /> <!-- same with a {page} variable from fluidpages --> <v:uri.typolink configuration=\"{parameter: page.uid}\" /> <!-- With extensive configuration --> <v:uri.typolink configuration=\"{parameter: page.uid, additionalParams: '&print=1'}\" /> /",
      "attributes": [
        {
          "name": "${configuration:configuration}=\"$1\"",
          "description": "The typoLink configuration",
          "valueSet": "v"
        },
        {
          "name": "configuration",
          "description": "The typoLink configuration"
        }
      ]
    },
    {
      "name": "v:variable.convert",
      "description": "### Convert ViewHelper Converts $value to $type which can be one of 'string', 'integer', 'float', 'boolean', 'array' or 'ObjectStorage'. If $value is NULL sensible defaults are assigned or $default which obviously has to be of $type as well. /",
      "attributes": [
        {
          "name": "${value:value}=\"$1\"",
          "description": "Value to convert into a different type",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "Value to convert into a different type"
        },
        {
          "name": "${type:type}=\"$1\"",
          "description": "Data type to convert the value into. Can be one of \"string\", \"integer\", \"float\", \"boolean\", \"array\" or \"ObjectStorage\".",
          "valueSet": "v"
        },
        {
          "name": "type",
          "description": "Data type to convert the value into. Can be one of \"string\", \"integer\", \"float\", \"boolean\", \"array\" or \"ObjectStorage\"."
        },
        {
          "name": "${default:default}=\"$1\"",
          "description": "Optional default value to assign to the converted variable in case it is NULL.",
          "valueSet": "v"
        },
        {
          "name": "default",
          "description": "Optional default value to assign to the converted variable in case it is NULL."
        }
      ]
    },
    {
      "name": "v:variable.extensionConfiguration",
      "description": "### ExtConf ViewHelper Reads settings from ext_conf_template.txt ### Examples {v:variable.extensionConfiguration(extensionKey:'foo',path:'bar.baz')} Returns setting `bar.baz` from extension 'foo' located in `ext_conf_template.txt`. /",
      "attributes": [
        {
          "name": "${extensionKey:extensionKey}=\"$1\"",
          "description": "Extension key (lowercase_underscored format) to read configuration from",
          "valueSet": "v"
        },
        {
          "name": "extensionKey",
          "description": "Extension key (lowercase_underscored format) to read configuration from"
        },
        {
          "name": "${path:path}=\"$1\"",
          "description": "Configuration path to read - if NULL, returns all configuration as array",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Configuration path to read - if NULL, returns all configuration as array"
        }
      ]
    },
    {
      "name": "v:variable.get",
      "description": "### Variable: Get ViewHelper used to read the value of a current template variable. Can be used with dynamic indices in arrays: <v:variable.get name=\"array.{dynamicIndex}\" /> <v:variable.get name=\"array.{v:variable.get(name: 'arrayOfSelectedKeys.{indexInArray}')}\" /> <f:for each=\"{v:variable.get(name: 'object.arrayProperty.{dynamicIndex}')}\" as=\"nestedObject\"> ... </f:for> Or to read names of variables which contain dynamic parts: <!-- if {variableName} is \"Name\", outputs value of {dynamicName} --> {v:variable.get(name: 'dynamic{variableName}')} If your target object is an array with unsequential yet numeric indices (e.g. {123: 'value1', 513: 'value2'}, commonly seen in reindexed UID map arrays) use `useRawKeys=\"TRUE\"` to indicate you do not want your array/QueryResult/Iterator to be accessed by locating the Nth element - which is the default behavior. ```warning Do not try `useRawKeys=\"TRUE\"` on QueryResult or ObjectStorage unless you are fully aware what you are doing. These particular types require an unpredictable index value - the SPL object hash value - when accessing members directly. This SPL indexing and the very common occurrences of QueryResult and ObjectStorage variables in templates is the very reason why `useRawKeys` by default is set to `FALSE`. ``` /",
      "attributes": [
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of variable to retrieve",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of variable to retrieve"
        },
        {
          "name": "${useRawKeys:useRawKeys}=\"$1\"",
          "description": "If TRUE, the path is directly passed to ObjectAccess. If FALSE, a custom and compatible VHS method is used",
          "valueSet": "v"
        },
        {
          "name": "useRawKeys",
          "description": "If TRUE, the path is directly passed to ObjectAccess. If FALSE, a custom and compatible VHS method is used"
        }
      ]
    },
    {
      "name": "v:variable.pregMatch",
      "description": "### PregMatch regular expression ViewHelper Implementation of `preg_match' for Fluid. /",
      "attributes": [
        {
          "name": "${as:as}=\"$1\"",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead.",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "Template variable name to assign; if not specified the ViewHelper returns the variable instead."
        },
        {
          "name": "${pattern:pattern}=\"$1\"",
          "description": "Regex pattern to match against",
          "valueSet": "v"
        },
        {
          "name": "pattern",
          "description": "Regex pattern to match against"
        },
        {
          "name": "${subject:subject}=\"$1\"",
          "description": "String to match with the regex pattern",
          "valueSet": "v"
        },
        {
          "name": "subject",
          "description": "String to match with the regex pattern"
        },
        {
          "name": "${global:global}=\"$1\"",
          "description": "Match global",
          "valueSet": "v"
        },
        {
          "name": "global",
          "description": "Match global"
        }
      ]
    },
    {
      "name": "v:variable.register.get",
      "description": "### Variable\\Register: Get ViewHelper used to read the value of a TSFE-register Can be used to read names of variables which contain dynamic parts: <!-- if {variableName} is \"Name\", outputs value of {dynamicName} --> {v:variable.register.get(name: 'dynamic{variableName}')} /",
      "attributes": [
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of register",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of register"
        }
      ]
    },
    {
      "name": "v:variable.register.set",
      "description": "### Variable\\Register: Set Sets a single register in the TSFE-register. Using as `{value -> v:variable.register.set(name: 'myVar')}` makes $GLOBALS[\"TSFE\"]->register['myVar'] contain `{value}`. /",
      "attributes": [
        {
          "name": "${value:value}=\"$1\"",
          "description": "Value to set",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "Value to set"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of register",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of register"
        }
      ]
    },
    {
      "name": "v:variable.set",
      "description": "### Variable: Set Sets a single variable in the TemplateVariableContainer scope. The variable then becomes accessible as {var}. Combines well with `v:variable.get` to set shorter variable names referencing dynamic variables, such as: <v:variable.set name=\"myObject\" value=\"{v:variable.get(name: 'arrayVariable.{offset}')}\" /> <!-- If {index} == 4 then {myObject} is now == {arrayVariable.4} --> {myObject.name} <!-- corresponds to {arrayVariable.4.name} --> Note that `{arrayVariable.{offset}.name}` is not possible due to the way Fluid parses nodes; the above piece of code would try reading `arrayVariable.{offset}.name` as a variable actually called \"arrayVariable.{offset}.name\" rather than the correct `arrayVariable[offset][name]`. In many ways this ViewHelper works like `f:alias` with one exception: in `f:alias` the variable only becomes accessible in the tag content, whereas `v:variable.set` inserts the variable in the template and leaves it there (it \"leaks\" the variable). If $name contains a dot, VHS will attempt to load the object stored under the named used as the first segment part and set the value at the remaining path. E.g. `{value -> v:variable.set(name: 'object.property.subProperty')}` would attempt to load `{object}` first, then set `property.subProperty` on that object/array using ObjectAccess::setPropertyPath(). If `{object}` is not an object or an array, the variable will not be set. Please note: Extbase does not currently support setting variables deeper than two levels, meaning a `name` of fx `foo.bar.baz` will be ignored. To set values deeper than two levels you must first extract the second-level object then set the value on that object. Using as `{value -> v:variable.set(name: 'myVar')}` makes `{myVar}` contain `{value}`. /",
      "attributes": [
        {
          "name": "${value:value}=\"$1\"",
          "description": "Value to set",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "Value to set"
        },
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of variable to assign",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of variable to assign"
        }
      ]
    },
    {
      "name": "v:variable.typoscript",
      "description": "### Variable: TypoScript Accesses Typoscript paths. Contrary to the Fluid-native `f:cObject` this ViewHelper does not render objects but rather retrieves the values. For example, if you retrieve a TypoScript path to a TMENU object you will receive the array of TypoScript defining the menu - not the rendered menu HTML. A great example of how to use this ViewHelper is to very quickly migrate a TypoScript-menu-based site (for example currently running TemplaVoila + TMENU-objects) to a Fluid ViewHelper menu based on `v:page.menu` or `v:page.breadCrumb` by accessing key configuration options such as `entryLevel` and even various `wrap` definitions. A quick example of how to parse a `wrap` TypoScript setting into two variables usable for a menu item: <!-- This piece to be added as far up as possible in order to prevent multiple executions --> <v:variable.set name=\"menuSettings\" value=\"{v:variable.typoscript(path: 'lib.menu.main.stdWrap')}\" /> <v:variable.set name=\"wrap\" value=\"{menuSettings.wrap -> v:iterator.explode(glue: '|')}\" /> <!-- This in the loop which renders the menu (see \"VHS: manual menu rendering\" in FAQ): --> {wrap.0}{menuItem.title}{wrap.1} <!-- An additional example to demonstrate very compact conditions which prevent wraps from being displayed --> {wrap.0 -> f:if(condition: settings.wrapBefore)}{menuItem.title}{wrap.1 -> f:if(condition: settings.wrapAfter)} /",
      "attributes": [
        {
          "name": "${path:path}=\"$1\"",
          "description": "Path to TypoScript value or configuration array",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "Path to TypoScript value or configuration array"
        }
      ]
    },
    {
      "name": "v:variable.unset",
      "description": "### Variable: Unset Quite simply, removes a currently available variable from the TemplateVariableContainer: <!-- Data: {person: {name: 'Elvis', nick: 'King'}} --> I'm {person.name}. Call me \"{person.nick}\". A ding-dang doo! <v:variable.unset name=\"person\" /> <f:if condition=\"{person}\"> <f:else> You saw this coming... <em>Elvis has left the building</em> </f:else> </f:if> At the time of writing this, `v:variable.unset` is not able to remove members of for example arrays: <!-- DOES NOT WORK! --> <v:variable.unset name=\"myObject.propertyName\" /> /",
      "attributes": [
        {
          "name": "${name:name}=\"$1\"",
          "description": "Name of variable in variable container",
          "valueSet": "v"
        },
        {
          "name": "name",
          "description": "Name of variable in variable container"
        }
      ]
    }
  ]
}